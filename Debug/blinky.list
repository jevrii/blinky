
blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08005974  08005974  00015974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bd4  08005bd4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005bd4  08005bd4  00015bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bdc  08005bdc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bdc  08005bdc  00015bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005be0  08005be0  00015be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000074  08005c58  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08005c58  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe53  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000228e  00000000  00000000  0002fef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  00032188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00032fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002225f  00000000  00000000  00033d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f628  00000000  00000000  00055f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2702  00000000  00000000  000655b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00137cb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000412c  00000000  00000000  00137d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800595c 	.word	0x0800595c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800595c 	.word	0x0800595c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2iz>:
 800088c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000894:	d215      	bcs.n	80008c2 <__aeabi_d2iz+0x36>
 8000896:	d511      	bpl.n	80008bc <__aeabi_d2iz+0x30>
 8000898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d912      	bls.n	80008c8 <__aeabi_d2iz+0x3c>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008b2:	fa23 f002 	lsr.w	r0, r3, r2
 80008b6:	bf18      	it	ne
 80008b8:	4240      	negne	r0, r0
 80008ba:	4770      	bx	lr
 80008bc:	f04f 0000 	mov.w	r0, #0
 80008c0:	4770      	bx	lr
 80008c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008c6:	d105      	bne.n	80008d4 <__aeabi_d2iz+0x48>
 80008c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008cc:	bf08      	it	eq
 80008ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295
 80008f0:	f000 b96e 	b.w	8000bd0 <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9d08      	ldr	r5, [sp, #32]
 8000912:	4604      	mov	r4, r0
 8000914:	468c      	mov	ip, r1
 8000916:	2b00      	cmp	r3, #0
 8000918:	f040 8083 	bne.w	8000a22 <__udivmoddi4+0x116>
 800091c:	428a      	cmp	r2, r1
 800091e:	4617      	mov	r7, r2
 8000920:	d947      	bls.n	80009b2 <__udivmoddi4+0xa6>
 8000922:	fab2 f282 	clz	r2, r2
 8000926:	b142      	cbz	r2, 800093a <__udivmoddi4+0x2e>
 8000928:	f1c2 0020 	rsb	r0, r2, #32
 800092c:	fa24 f000 	lsr.w	r0, r4, r0
 8000930:	4091      	lsls	r1, r2
 8000932:	4097      	lsls	r7, r2
 8000934:	ea40 0c01 	orr.w	ip, r0, r1
 8000938:	4094      	lsls	r4, r2
 800093a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800093e:	0c23      	lsrs	r3, r4, #16
 8000940:	fbbc f6f8 	udiv	r6, ip, r8
 8000944:	fa1f fe87 	uxth.w	lr, r7
 8000948:	fb08 c116 	mls	r1, r8, r6, ip
 800094c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000950:	fb06 f10e 	mul.w	r1, r6, lr
 8000954:	4299      	cmp	r1, r3
 8000956:	d909      	bls.n	800096c <__udivmoddi4+0x60>
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	f106 30ff 	add.w	r0, r6, #4294967295
 800095e:	f080 8119 	bcs.w	8000b94 <__udivmoddi4+0x288>
 8000962:	4299      	cmp	r1, r3
 8000964:	f240 8116 	bls.w	8000b94 <__udivmoddi4+0x288>
 8000968:	3e02      	subs	r6, #2
 800096a:	443b      	add	r3, r7
 800096c:	1a5b      	subs	r3, r3, r1
 800096e:	b2a4      	uxth	r4, r4
 8000970:	fbb3 f0f8 	udiv	r0, r3, r8
 8000974:	fb08 3310 	mls	r3, r8, r0, r3
 8000978:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800097c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000980:	45a6      	cmp	lr, r4
 8000982:	d909      	bls.n	8000998 <__udivmoddi4+0x8c>
 8000984:	193c      	adds	r4, r7, r4
 8000986:	f100 33ff 	add.w	r3, r0, #4294967295
 800098a:	f080 8105 	bcs.w	8000b98 <__udivmoddi4+0x28c>
 800098e:	45a6      	cmp	lr, r4
 8000990:	f240 8102 	bls.w	8000b98 <__udivmoddi4+0x28c>
 8000994:	3802      	subs	r0, #2
 8000996:	443c      	add	r4, r7
 8000998:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800099c:	eba4 040e 	sub.w	r4, r4, lr
 80009a0:	2600      	movs	r6, #0
 80009a2:	b11d      	cbz	r5, 80009ac <__udivmoddi4+0xa0>
 80009a4:	40d4      	lsrs	r4, r2
 80009a6:	2300      	movs	r3, #0
 80009a8:	e9c5 4300 	strd	r4, r3, [r5]
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	b902      	cbnz	r2, 80009b6 <__udivmoddi4+0xaa>
 80009b4:	deff      	udf	#255	; 0xff
 80009b6:	fab2 f282 	clz	r2, r2
 80009ba:	2a00      	cmp	r2, #0
 80009bc:	d150      	bne.n	8000a60 <__udivmoddi4+0x154>
 80009be:	1bcb      	subs	r3, r1, r7
 80009c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009c4:	fa1f f887 	uxth.w	r8, r7
 80009c8:	2601      	movs	r6, #1
 80009ca:	fbb3 fcfe 	udiv	ip, r3, lr
 80009ce:	0c21      	lsrs	r1, r4, #16
 80009d0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009d8:	fb08 f30c 	mul.w	r3, r8, ip
 80009dc:	428b      	cmp	r3, r1
 80009de:	d907      	bls.n	80009f0 <__udivmoddi4+0xe4>
 80009e0:	1879      	adds	r1, r7, r1
 80009e2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0xe2>
 80009e8:	428b      	cmp	r3, r1
 80009ea:	f200 80e9 	bhi.w	8000bc0 <__udivmoddi4+0x2b4>
 80009ee:	4684      	mov	ip, r0
 80009f0:	1ac9      	subs	r1, r1, r3
 80009f2:	b2a3      	uxth	r3, r4
 80009f4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009f8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009fc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a00:	fb08 f800 	mul.w	r8, r8, r0
 8000a04:	45a0      	cmp	r8, r4
 8000a06:	d907      	bls.n	8000a18 <__udivmoddi4+0x10c>
 8000a08:	193c      	adds	r4, r7, r4
 8000a0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a0e:	d202      	bcs.n	8000a16 <__udivmoddi4+0x10a>
 8000a10:	45a0      	cmp	r8, r4
 8000a12:	f200 80d9 	bhi.w	8000bc8 <__udivmoddi4+0x2bc>
 8000a16:	4618      	mov	r0, r3
 8000a18:	eba4 0408 	sub.w	r4, r4, r8
 8000a1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a20:	e7bf      	b.n	80009a2 <__udivmoddi4+0x96>
 8000a22:	428b      	cmp	r3, r1
 8000a24:	d909      	bls.n	8000a3a <__udivmoddi4+0x12e>
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	f000 80b1 	beq.w	8000b8e <__udivmoddi4+0x282>
 8000a2c:	2600      	movs	r6, #0
 8000a2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a32:	4630      	mov	r0, r6
 8000a34:	4631      	mov	r1, r6
 8000a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3a:	fab3 f683 	clz	r6, r3
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	d14a      	bne.n	8000ad8 <__udivmoddi4+0x1cc>
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d302      	bcc.n	8000a4c <__udivmoddi4+0x140>
 8000a46:	4282      	cmp	r2, r0
 8000a48:	f200 80b8 	bhi.w	8000bbc <__udivmoddi4+0x2b0>
 8000a4c:	1a84      	subs	r4, r0, r2
 8000a4e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a52:	2001      	movs	r0, #1
 8000a54:	468c      	mov	ip, r1
 8000a56:	2d00      	cmp	r5, #0
 8000a58:	d0a8      	beq.n	80009ac <__udivmoddi4+0xa0>
 8000a5a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a5e:	e7a5      	b.n	80009ac <__udivmoddi4+0xa0>
 8000a60:	f1c2 0320 	rsb	r3, r2, #32
 8000a64:	fa20 f603 	lsr.w	r6, r0, r3
 8000a68:	4097      	lsls	r7, r2
 8000a6a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a6e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a72:	40d9      	lsrs	r1, r3
 8000a74:	4330      	orrs	r0, r6
 8000a76:	0c03      	lsrs	r3, r0, #16
 8000a78:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a7c:	fa1f f887 	uxth.w	r8, r7
 8000a80:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a88:	fb06 f108 	mul.w	r1, r6, r8
 8000a8c:	4299      	cmp	r1, r3
 8000a8e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a92:	d909      	bls.n	8000aa8 <__udivmoddi4+0x19c>
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a9a:	f080 808d 	bcs.w	8000bb8 <__udivmoddi4+0x2ac>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 808a 	bls.w	8000bb8 <__udivmoddi4+0x2ac>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	443b      	add	r3, r7
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b281      	uxth	r1, r0
 8000aac:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ab0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ab4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ab8:	fb00 f308 	mul.w	r3, r0, r8
 8000abc:	428b      	cmp	r3, r1
 8000abe:	d907      	bls.n	8000ad0 <__udivmoddi4+0x1c4>
 8000ac0:	1879      	adds	r1, r7, r1
 8000ac2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ac6:	d273      	bcs.n	8000bb0 <__udivmoddi4+0x2a4>
 8000ac8:	428b      	cmp	r3, r1
 8000aca:	d971      	bls.n	8000bb0 <__udivmoddi4+0x2a4>
 8000acc:	3802      	subs	r0, #2
 8000ace:	4439      	add	r1, r7
 8000ad0:	1acb      	subs	r3, r1, r3
 8000ad2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ad6:	e778      	b.n	80009ca <__udivmoddi4+0xbe>
 8000ad8:	f1c6 0c20 	rsb	ip, r6, #32
 8000adc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ae0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ae4:	431c      	orrs	r4, r3
 8000ae6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aea:	fa01 f306 	lsl.w	r3, r1, r6
 8000aee:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000af2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000af6:	431f      	orrs	r7, r3
 8000af8:	0c3b      	lsrs	r3, r7, #16
 8000afa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000afe:	fa1f f884 	uxth.w	r8, r4
 8000b02:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b06:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b0a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b0e:	458a      	cmp	sl, r1
 8000b10:	fa02 f206 	lsl.w	r2, r2, r6
 8000b14:	fa00 f306 	lsl.w	r3, r0, r6
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x220>
 8000b1a:	1861      	adds	r1, r4, r1
 8000b1c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b20:	d248      	bcs.n	8000bb4 <__udivmoddi4+0x2a8>
 8000b22:	458a      	cmp	sl, r1
 8000b24:	d946      	bls.n	8000bb4 <__udivmoddi4+0x2a8>
 8000b26:	f1a9 0902 	sub.w	r9, r9, #2
 8000b2a:	4421      	add	r1, r4
 8000b2c:	eba1 010a 	sub.w	r1, r1, sl
 8000b30:	b2bf      	uxth	r7, r7
 8000b32:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b36:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b3a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b3e:	fb00 f808 	mul.w	r8, r0, r8
 8000b42:	45b8      	cmp	r8, r7
 8000b44:	d907      	bls.n	8000b56 <__udivmoddi4+0x24a>
 8000b46:	19e7      	adds	r7, r4, r7
 8000b48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4c:	d22e      	bcs.n	8000bac <__udivmoddi4+0x2a0>
 8000b4e:	45b8      	cmp	r8, r7
 8000b50:	d92c      	bls.n	8000bac <__udivmoddi4+0x2a0>
 8000b52:	3802      	subs	r0, #2
 8000b54:	4427      	add	r7, r4
 8000b56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b5a:	eba7 0708 	sub.w	r7, r7, r8
 8000b5e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b62:	454f      	cmp	r7, r9
 8000b64:	46c6      	mov	lr, r8
 8000b66:	4649      	mov	r1, r9
 8000b68:	d31a      	bcc.n	8000ba0 <__udivmoddi4+0x294>
 8000b6a:	d017      	beq.n	8000b9c <__udivmoddi4+0x290>
 8000b6c:	b15d      	cbz	r5, 8000b86 <__udivmoddi4+0x27a>
 8000b6e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b72:	eb67 0701 	sbc.w	r7, r7, r1
 8000b76:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b7a:	40f2      	lsrs	r2, r6
 8000b7c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b80:	40f7      	lsrs	r7, r6
 8000b82:	e9c5 2700 	strd	r2, r7, [r5]
 8000b86:	2600      	movs	r6, #0
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	462e      	mov	r6, r5
 8000b90:	4628      	mov	r0, r5
 8000b92:	e70b      	b.n	80009ac <__udivmoddi4+0xa0>
 8000b94:	4606      	mov	r6, r0
 8000b96:	e6e9      	b.n	800096c <__udivmoddi4+0x60>
 8000b98:	4618      	mov	r0, r3
 8000b9a:	e6fd      	b.n	8000998 <__udivmoddi4+0x8c>
 8000b9c:	4543      	cmp	r3, r8
 8000b9e:	d2e5      	bcs.n	8000b6c <__udivmoddi4+0x260>
 8000ba0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ba4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ba8:	3801      	subs	r0, #1
 8000baa:	e7df      	b.n	8000b6c <__udivmoddi4+0x260>
 8000bac:	4608      	mov	r0, r1
 8000bae:	e7d2      	b.n	8000b56 <__udivmoddi4+0x24a>
 8000bb0:	4660      	mov	r0, ip
 8000bb2:	e78d      	b.n	8000ad0 <__udivmoddi4+0x1c4>
 8000bb4:	4681      	mov	r9, r0
 8000bb6:	e7b9      	b.n	8000b2c <__udivmoddi4+0x220>
 8000bb8:	4666      	mov	r6, ip
 8000bba:	e775      	b.n	8000aa8 <__udivmoddi4+0x19c>
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	e74a      	b.n	8000a56 <__udivmoddi4+0x14a>
 8000bc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bc4:	4439      	add	r1, r7
 8000bc6:	e713      	b.n	80009f0 <__udivmoddi4+0xe4>
 8000bc8:	3802      	subs	r0, #2
 8000bca:	443c      	add	r4, r7
 8000bcc:	e724      	b.n	8000a18 <__udivmoddi4+0x10c>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_idiv0>:
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8000bda:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char msg[] = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse euismod elit quis interdum laoreet. Proin consectetur eget purus ut tempus. Suspendisse augue lectus, lobortis id neque id, vestibulum convallis leo. Duis ipsum eros, tristique in ipsum tempus, semper scelerisque lacus. Nam rhoncus nunc eu congue mollis. Donec blandit ipsum quis semper sodales. Maecenas mauris orci, tincidunt at massa vitae, pellentesque vestibulum dui. Ut tincidunt turpis odio, id feugiat metus rhoncus ligula.\r\n";
 8000bdc:	f107 0320 	add.w	r3, r7, #32
 8000be0:	4a2d      	ldr	r2, [pc, #180]	; (8000c98 <main+0xc4>)
 8000be2:	4618      	mov	r0, r3
 8000be4:	4611      	mov	r1, r2
 8000be6:	f240 13f7 	movw	r3, #503	; 0x1f7
 8000bea:	461a      	mov	r2, r3
 8000bec:	f004 fa80 	bl	80050f0 <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf0:	f000 fdfc 	bl	80017ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf4:	f000 f864 	bl	8000cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf8:	f000 f9f6 	bl	8000fe8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bfc:	f000 f9d4 	bl	8000fa8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c00:	f000 f9a8 	bl	8000f54 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000c04:	f000 f982 	bl	8000f0c <MX_TIM14_Init>
  MX_TIM1_Init();
 8000c08:	f000 f8fc 	bl	8000e04 <MX_TIM1_Init>
  MX_CAN1_Init();
 8000c0c:	f000 f8c4 	bl	8000d98 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim14);
 8000c10:	4822      	ldr	r0, [pc, #136]	; (8000c9c <main+0xc8>)
 8000c12:	f003 f883 	bl	8003d1c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c16:	2100      	movs	r1, #0
 8000c18:	4821      	ldr	r0, [pc, #132]	; (8000ca0 <main+0xcc>)
 8000c1a:	f003 f93f 	bl	8003e9c <HAL_TIM_PWM_Start>

  can_filter_init();
 8000c1e:	f000 faaf 	bl	8001180 <can_filter_init>
	HAL_CAN_Start(&hcan1); //start CAN
 8000c22:	4820      	ldr	r0, [pc, #128]	; (8000ca4 <main+0xd0>)
 8000c24:	f001 f854 	bl	8001cd0 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); //enable interrupts
 8000c28:	2102      	movs	r1, #2
 8000c2a:	481e      	ldr	r0, [pc, #120]	; (8000ca4 <main+0xd0>)
 8000c2c:	f001 fa81 	bl	8002132 <HAL_CAN_ActivateNotification>
  {

//	  uint16_t timer_val = __HAL_TIM_GET_COUNTER(&htim14);
//	HAL_Delay(50);
//	  timer_val = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
	uint8_t buf[30] = {0};
 8000c30:	463b      	mov	r3, r7
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	3304      	adds	r3, #4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
 8000c44:	615a      	str	r2, [r3, #20]
 8000c46:	831a      	strh	r2, [r3, #24]
	sprintf (buf, "%d pos %d vel %d\r\n", x, cur_pos, (int16_t)(rx_data[2] << 8 | rx_data[3]));
 8000c48:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <main+0xd4>)
 8000c4a:	6819      	ldr	r1, [r3, #0]
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <main+0xd8>)
 8000c4e:	681c      	ldr	r4, [r3, #0]
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <main+0xdc>)
 8000c52:	789b      	ldrb	r3, [r3, #2]
 8000c54:	021b      	lsls	r3, r3, #8
 8000c56:	b21a      	sxth	r2, r3
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <main+0xdc>)
 8000c5a:	78db      	ldrb	r3, [r3, #3]
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	b21b      	sxth	r3, r3
 8000c62:	4638      	mov	r0, r7
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	4623      	mov	r3, r4
 8000c68:	460a      	mov	r2, r1
 8000c6a:	4912      	ldr	r1, [pc, #72]	; (8000cb4 <main+0xe0>)
 8000c6c:	f004 fa56 	bl	800511c <siprintf>
//	}
//	else {
////		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
//		htim1.Instance->CCR1 = 4000;
//	}
	HAL_Delay(50);
 8000c70:	2032      	movs	r0, #50	; 0x32
 8000c72:	f000 fe2d 	bl	80018d0 <HAL_Delay>
	HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000c76:	463b      	mov	r3, r7
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fac9 	bl	8000210 <strlen>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	4639      	mov	r1, r7
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
 8000c88:	480b      	ldr	r0, [pc, #44]	; (8000cb8 <main+0xe4>)
 8000c8a:	f003 ff62 	bl	8004b52 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000c8e:	2120      	movs	r1, #32
 8000c90:	480a      	ldr	r0, [pc, #40]	; (8000cbc <main+0xe8>)
 8000c92:	f002 fa56 	bl	8003142 <HAL_GPIO_TogglePin>
  {
 8000c96:	e7cb      	b.n	8000c30 <main+0x5c>
 8000c98:	08005988 	.word	0x08005988
 8000c9c:	200001ec 	.word	0x200001ec
 8000ca0:	2000010c 	.word	0x2000010c
 8000ca4:	200001c4 	.word	0x200001c4
 8000ca8:	20000090 	.word	0x20000090
 8000cac:	200000a4 	.word	0x200000a4
 8000cb0:	20000154 	.word	0x20000154
 8000cb4:	08005974 	.word	0x08005974
 8000cb8:	20000180 	.word	0x20000180
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b094      	sub	sp, #80	; 0x50
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	2234      	movs	r2, #52	; 0x34
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f004 fa1c 	bl	800510c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	f107 0308 	add.w	r3, r7, #8
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <SystemClock_Config+0xd0>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a28      	ldr	r2, [pc, #160]	; (8000d90 <SystemClock_Config+0xd0>)
 8000cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <SystemClock_Config+0xd0>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d00:	2300      	movs	r3, #0
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <SystemClock_Config+0xd4>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d0c:	4a21      	ldr	r2, [pc, #132]	; (8000d94 <SystemClock_Config+0xd4>)
 8000d0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <SystemClock_Config+0xd4>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d20:	2301      	movs	r3, #1
 8000d22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d28:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d34:	2304      	movs	r3, #4
 8000d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000d38:	2348      	movs	r3, #72	; 0x48
 8000d3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000d40:	2303      	movs	r3, #3
 8000d42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d44:	2302      	movs	r3, #2
 8000d46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 fcf7 	bl	8003740 <HAL_RCC_OscConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d58:	f000 fa32 	bl	80011c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d60:	2302      	movs	r3, #2
 8000d62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	2102      	movs	r1, #2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f002 fa15 	bl	80031a8 <HAL_RCC_ClockConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000d84:	f000 fa1c 	bl	80011c0 <Error_Handler>
  }
}
 8000d88:	bf00      	nop
 8000d8a:	3750      	adds	r7, #80	; 0x50
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40007000 	.word	0x40007000

08000d98 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000d9e:	4a18      	ldr	r2, [pc, #96]	; (8000e00 <MX_CAN1_Init+0x68>)
 8000da0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000da4:	2209      	movs	r2, #9
 8000da6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000db6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dba:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000de8:	f000 fd96 	bl	8001918 <HAL_CAN_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000df2:	f000 f9e5 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200001c4 	.word	0x200001c4
 8000e00:	40006400 	.word	0x40006400

08000e04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b092      	sub	sp, #72	; 0x48
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
 8000e24:	615a      	str	r2, [r3, #20]
 8000e26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	2220      	movs	r2, #32
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f004 f96c 	bl	800510c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e34:	4b33      	ldr	r3, [pc, #204]	; (8000f04 <MX_TIM1_Init+0x100>)
 8000e36:	4a34      	ldr	r2, [pc, #208]	; (8000f08 <MX_TIM1_Init+0x104>)
 8000e38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 8000e3a:	4b32      	ldr	r3, [pc, #200]	; (8000f04 <MX_TIM1_Init+0x100>)
 8000e3c:	2208      	movs	r2, #8
 8000e3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e40:	4b30      	ldr	r3, [pc, #192]	; (8000f04 <MX_TIM1_Init+0x100>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4800;
 8000e46:	4b2f      	ldr	r3, [pc, #188]	; (8000f04 <MX_TIM1_Init+0x100>)
 8000e48:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000e4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <MX_TIM1_Init+0x100>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e54:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <MX_TIM1_Init+0x100>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <MX_TIM1_Init+0x100>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e60:	4828      	ldr	r0, [pc, #160]	; (8000f04 <MX_TIM1_Init+0x100>)
 8000e62:	f002 ffcb 	bl	8003dfc <HAL_TIM_PWM_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000e6c:	f000 f9a8 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4821      	ldr	r0, [pc, #132]	; (8000f04 <MX_TIM1_Init+0x100>)
 8000e80:	f003 fd38 	bl	80048f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000e8a:	f000 f999 	bl	80011c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e8e:	2360      	movs	r3, #96	; 0x60
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 8000e92:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4813      	ldr	r0, [pc, #76]	; (8000f04 <MX_TIM1_Init+0x100>)
 8000eb6:	f003 f9c1 	bl	800423c <HAL_TIM_PWM_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000ec0:	f000 f97e 	bl	80011c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000edc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4807      	ldr	r0, [pc, #28]	; (8000f04 <MX_TIM1_Init+0x100>)
 8000ee8:	f003 fd80 	bl	80049ec <HAL_TIMEx_ConfigBreakDeadTime>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000ef2:	f000 f965 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ef6:	4803      	ldr	r0, [pc, #12]	; (8000f04 <MX_TIM1_Init+0x100>)
 8000ef8:	f000 fa2a 	bl	8001350 <HAL_TIM_MspPostInit>

}
 8000efc:	bf00      	nop
 8000efe:	3748      	adds	r7, #72	; 0x48
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2000010c 	.word	0x2000010c
 8000f08:	40010000 	.word	0x40010000

08000f0c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_TIM14_Init+0x40>)
 8000f12:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <MX_TIM14_Init+0x44>)
 8000f14:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 7200-1;
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <MX_TIM14_Init+0x40>)
 8000f18:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000f1c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <MX_TIM14_Init+0x40>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_TIM14_Init+0x40>)
 8000f26:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f2a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <MX_TIM14_Init+0x40>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_TIM14_Init+0x40>)
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MX_TIM14_Init+0x40>)
 8000f3a:	f002 fe9f 	bl	8003c7c <HAL_TIM_Base_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000f44:	f000 f93c 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200001ec 	.word	0x200001ec
 8000f50:	40002000 	.word	0x40002000

08000f54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <MX_USART2_UART_Init+0x50>)
 8000f5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f8c:	f003 fd94 	bl	8004ab8 <HAL_UART_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f96:	f000 f913 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000180 	.word	0x20000180
 8000fa4:	40004400 	.word	0x40004400

08000fa8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <MX_DMA_Init+0x3c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <MX_DMA_Init+0x3c>)
 8000fb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_DMA_Init+0x3c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2011      	movs	r0, #17
 8000fd0:	f001 fbe9 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000fd4:	2011      	movs	r0, #17
 8000fd6:	f001 fc02 	bl	80027de <HAL_NVIC_EnableIRQ>

}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800

08000fe8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b3b      	ldr	r3, [pc, #236]	; (80010f0 <MX_GPIO_Init+0x108>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a3a      	ldr	r2, [pc, #232]	; (80010f0 <MX_GPIO_Init+0x108>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <MX_GPIO_Init+0x108>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b34      	ldr	r3, [pc, #208]	; (80010f0 <MX_GPIO_Init+0x108>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a33      	ldr	r2, [pc, #204]	; (80010f0 <MX_GPIO_Init+0x108>)
 8001024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b31      	ldr	r3, [pc, #196]	; (80010f0 <MX_GPIO_Init+0x108>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <MX_GPIO_Init+0x108>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a2c      	ldr	r2, [pc, #176]	; (80010f0 <MX_GPIO_Init+0x108>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b2a      	ldr	r3, [pc, #168]	; (80010f0 <MX_GPIO_Init+0x108>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <MX_GPIO_Init+0x108>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a25      	ldr	r2, [pc, #148]	; (80010f0 <MX_GPIO_Init+0x108>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <MX_GPIO_Init+0x108>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 6106 	mov.w	r1, #2144	; 0x860
 8001074:	481f      	ldr	r0, [pc, #124]	; (80010f4 <MX_GPIO_Init+0x10c>)
 8001076:	f002 f84b 	bl	8003110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2140      	movs	r1, #64	; 0x40
 800107e:	481e      	ldr	r0, [pc, #120]	; (80010f8 <MX_GPIO_Init+0x110>)
 8001080:	f002 f846 	bl	8003110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001084:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <MX_GPIO_Init+0x114>)
 800108c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	4819      	ldr	r0, [pc, #100]	; (8001100 <MX_GPIO_Init+0x118>)
 800109a:	f001 fea5 	bl	8002de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11;
 800109e:	f44f 6306 	mov.w	r3, #2144	; 0x860
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	480f      	ldr	r0, [pc, #60]	; (80010f4 <MX_GPIO_Init+0x10c>)
 80010b8:	f001 fe96 	bl	8002de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010bc:	2340      	movs	r3, #64	; 0x40
 80010be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	4809      	ldr	r0, [pc, #36]	; (80010f8 <MX_GPIO_Init+0x110>)
 80010d4:	f001 fe88 	bl	8002de8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2028      	movs	r0, #40	; 0x28
 80010de:	f001 fb62 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010e2:	2028      	movs	r0, #40	; 0x28
 80010e4:	f001 fb7b 	bl	80027de <HAL_NVIC_EnableIRQ>

}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	; 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40020400 	.word	0x40020400
 80010fc:	10210000 	.word	0x10210000
 8001100:	40020800 	.word	0x40020800

08001104 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
//	if (htim == &htim14)
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_GPIO_EXTI_Callback>:
}

bool off = false;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_13) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001128:	d120      	bne.n	800116c <HAL_GPIO_EXTI_Callback+0x54>
    {
    	if (!off)
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <HAL_GPIO_EXTI_Callback+0x60>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	f083 0301 	eor.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <HAL_GPIO_EXTI_Callback+0x2c>
    		htim1.Instance->CCR1 = 1000;
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <HAL_GPIO_EXTI_Callback+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001140:	635a      	str	r2, [r3, #52]	; 0x34
 8001142:	e004      	b.n	800114e <HAL_GPIO_EXTI_Callback+0x36>
    	else
    		htim1.Instance->CCR1 = 4000;
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <HAL_GPIO_EXTI_Callback+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800114c:	635a      	str	r2, [r3, #52]	; 0x34
    	off = !off;
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_GPIO_EXTI_Callback+0x60>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	bf14      	ite	ne
 8001156:	2301      	movne	r3, #1
 8001158:	2300      	moveq	r3, #0
 800115a:	b2db      	uxtb	r3, r3
 800115c:	f083 0301 	eor.w	r3, r3, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <HAL_GPIO_EXTI_Callback+0x60>)
 800116a:	701a      	strb	r2, [r3, #0]
    }
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	20000094 	.word	0x20000094
 800117c:	2000010c 	.word	0x2000010c

08001180 <can_filter_init>:

void can_filter_init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0

    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 8001186:	2301      	movs	r3, #1
 8001188:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 800118a:	2300      	movs	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 800118e:	2301      	movs	r3, #1
 8001190:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	4803      	ldr	r0, [pc, #12]	; (80011bc <can_filter_init+0x3c>)
 80011b0:	f000 fcae 	bl	8001b10 <HAL_CAN_ConfigFilter>
}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200001c4 	.word	0x200001c4

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <Error_Handler+0x8>
	...

080011cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <HAL_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <HAL_MspInit+0x4c>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <HAL_MspInit+0x4c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_MspInit+0x4c>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_MspInit+0x4c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800120a:	2007      	movs	r0, #7
 800120c:	f001 fac0 	bl	8002790 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40023800 	.word	0x40023800

0800121c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a1d      	ldr	r2, [pc, #116]	; (80012b0 <HAL_CAN_MspInit+0x94>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d134      	bne.n	80012a8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <HAL_CAN_MspInit+0x98>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <HAL_CAN_MspInit+0x98>)
 8001248:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <HAL_CAN_MspInit+0x98>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_CAN_MspInit+0x98>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <HAL_CAN_MspInit+0x98>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_CAN_MspInit+0x98>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001276:	f44f 7340 	mov.w	r3, #768	; 0x300
 800127a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001288:	2309      	movs	r3, #9
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	4809      	ldr	r0, [pc, #36]	; (80012b8 <HAL_CAN_MspInit+0x9c>)
 8001294:	f001 fda8 	bl	8002de8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	2100      	movs	r1, #0
 800129c:	2014      	movs	r0, #20
 800129e:	f001 fa82 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80012a2:	2014      	movs	r0, #20
 80012a4:	f001 fa9b 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	; 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40006400 	.word	0x40006400
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020400 	.word	0x40020400

080012bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d10d      	bne.n	80012ea <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_TIM_PWM_MspInit+0x40>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a09      	ldr	r2, [pc, #36]	; (80012fc <HAL_TIM_PWM_MspInit+0x40>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <HAL_TIM_PWM_MspInit+0x40>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40010000 	.word	0x40010000
 80012fc:	40023800 	.word	0x40023800

08001300 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <HAL_TIM_Base_MspInit+0x48>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d115      	bne.n	800133e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <HAL_TIM_Base_MspInit+0x4c>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	4a0c      	ldr	r2, [pc, #48]	; (800134c <HAL_TIM_Base_MspInit+0x4c>)
 800131c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001320:	6413      	str	r3, [r2, #64]	; 0x40
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <HAL_TIM_Base_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	202d      	movs	r0, #45	; 0x2d
 8001334:	f001 fa37 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001338:	202d      	movs	r0, #45	; 0x2d
 800133a:	f001 fa50 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40002000 	.word	0x40002000
 800134c:	40023800 	.word	0x40023800

08001350 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <HAL_TIM_MspPostInit+0x68>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d11e      	bne.n	80013b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <HAL_TIM_MspPostInit+0x6c>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a10      	ldr	r2, [pc, #64]	; (80013bc <HAL_TIM_MspPostInit+0x6c>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_TIM_MspPostInit+0x6c>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800138e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001392:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800139c:	2302      	movs	r3, #2
 800139e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	4619      	mov	r1, r3
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <HAL_TIM_MspPostInit+0x70>)
 80013ac:	f001 fd1c 	bl	8002de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013b0:	bf00      	nop
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40010000 	.word	0x40010000
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020000 	.word	0x40020000

080013c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a30      	ldr	r2, [pc, #192]	; (80014a4 <HAL_UART_MspInit+0xe0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d159      	bne.n	800149a <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <HAL_UART_MspInit+0xe4>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a2e      	ldr	r2, [pc, #184]	; (80014a8 <HAL_UART_MspInit+0xe4>)
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
 80013f6:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <HAL_UART_MspInit+0xe4>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <HAL_UART_MspInit+0xe4>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a27      	ldr	r2, [pc, #156]	; (80014a8 <HAL_UART_MspInit+0xe4>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <HAL_UART_MspInit+0xe4>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800141e:	230c      	movs	r3, #12
 8001420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800142e:	2307      	movs	r3, #7
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	481c      	ldr	r0, [pc, #112]	; (80014ac <HAL_UART_MspInit+0xe8>)
 800143a:	f001 fcd5 	bl	8002de8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <HAL_UART_MspInit+0xec>)
 8001440:	4a1c      	ldr	r2, [pc, #112]	; (80014b4 <HAL_UART_MspInit+0xf0>)
 8001442:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <HAL_UART_MspInit+0xec>)
 8001446:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800144a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_UART_MspInit+0xec>)
 800144e:	2240      	movs	r2, #64	; 0x40
 8001450:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <HAL_UART_MspInit+0xec>)
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_UART_MspInit+0xec>)
 800145a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800145e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <HAL_UART_MspInit+0xec>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_UART_MspInit+0xec>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HAL_UART_MspInit+0xec>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <HAL_UART_MspInit+0xec>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001478:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <HAL_UART_MspInit+0xec>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800147e:	480c      	ldr	r0, [pc, #48]	; (80014b0 <HAL_UART_MspInit+0xec>)
 8001480:	f001 f9c8 	bl	8002814 <HAL_DMA_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800148a:	f7ff fe99 	bl	80011c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <HAL_UART_MspInit+0xec>)
 8001492:	635a      	str	r2, [r3, #52]	; 0x34
 8001494:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <HAL_UART_MspInit+0xec>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	; 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40004400 	.word	0x40004400
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020000 	.word	0x40020000
 80014b0:	200000ac 	.word	0x200000ac
 80014b4:	400260a0 	.word	0x400260a0

080014b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <NMI_Handler+0x4>

080014be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <MemManage_Handler+0x4>

080014ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001504:	f000 f9c4 	bl	8001890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}

0800150c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <DMA1_Stream6_IRQHandler+0x10>)
 8001512:	f001 fa2d 	bl	8002970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200000ac 	.word	0x200000ac

08001520 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_RX0_IRQn 0 */

	/* USER CODE END CAN1_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 8001526:	4862      	ldr	r0, [pc, #392]	; (80016b0 <CAN1_RX0_IRQHandler+0x190>)
 8001528:	f000 fe29 	bl	800217e <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_RX0_IRQn 1 */
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, &rx_data);
 800152c:	4b61      	ldr	r3, [pc, #388]	; (80016b4 <CAN1_RX0_IRQHandler+0x194>)
 800152e:	4a62      	ldr	r2, [pc, #392]	; (80016b8 <CAN1_RX0_IRQHandler+0x198>)
 8001530:	2100      	movs	r1, #0
 8001532:	485f      	ldr	r0, [pc, #380]	; (80016b0 <CAN1_RX0_IRQHandler+0x190>)
 8001534:	f000 fceb 	bl	8001f0e <HAL_CAN_GetRxMessage>
	x++;
 8001538:	4b60      	ldr	r3, [pc, #384]	; (80016bc <CAN1_RX0_IRQHandler+0x19c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	4a5f      	ldr	r2, [pc, #380]	; (80016bc <CAN1_RX0_IRQHandler+0x19c>)
 8001540:	6013      	str	r3, [r2, #0]

	int pos_fb = (rx_data[0] << 8 | rx_data[1]);
 8001542:	4b5c      	ldr	r3, [pc, #368]	; (80016b4 <CAN1_RX0_IRQHandler+0x194>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	4a5a      	ldr	r2, [pc, #360]	; (80016b4 <CAN1_RX0_IRQHandler+0x194>)
 800154a:	7852      	ldrb	r2, [r2, #1]
 800154c:	4313      	orrs	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]
	int16_t vel_fb = (int16_t)(rx_data[2] << 8 | rx_data[3]);
 8001550:	4b58      	ldr	r3, [pc, #352]	; (80016b4 <CAN1_RX0_IRQHandler+0x194>)
 8001552:	789b      	ldrb	r3, [r3, #2]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	4b56      	ldr	r3, [pc, #344]	; (80016b4 <CAN1_RX0_IRQHandler+0x194>)
 800155a:	78db      	ldrb	r3, [r3, #3]
 800155c:	b21b      	sxth	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	817b      	strh	r3, [r7, #10]

	if (is_first) {
 8001562:	4b57      	ldr	r3, [pc, #348]	; (80016c0 <CAN1_RX0_IRQHandler+0x1a0>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d005      	beq.n	8001576 <CAN1_RX0_IRQHandler+0x56>
		last_pos = pos_fb;
 800156a:	4a56      	ldr	r2, [pc, #344]	; (80016c4 <CAN1_RX0_IRQHandler+0x1a4>)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6013      	str	r3, [r2, #0]
		is_first = false;
 8001570:	4b53      	ldr	r3, [pc, #332]	; (80016c0 <CAN1_RX0_IRQHandler+0x1a0>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
	}

	if (pos_fb - last_pos > 4096) {
 8001576:	4b53      	ldr	r3, [pc, #332]	; (80016c4 <CAN1_RX0_IRQHandler+0x1a4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001582:	dd0b      	ble.n	800159c <CAN1_RX0_IRQHandler+0x7c>
		cur_pos += pos_fb - last_pos - 8192;
 8001584:	4b4f      	ldr	r3, [pc, #316]	; (80016c4 <CAN1_RX0_IRQHandler+0x1a4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	f5a3 5200 	sub.w	r2, r3, #8192	; 0x2000
 8001590:	4b4d      	ldr	r3, [pc, #308]	; (80016c8 <CAN1_RX0_IRQHandler+0x1a8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4413      	add	r3, r2
 8001596:	4a4c      	ldr	r2, [pc, #304]	; (80016c8 <CAN1_RX0_IRQHandler+0x1a8>)
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e01b      	b.n	80015d4 <CAN1_RX0_IRQHandler+0xb4>
	}
	else if (pos_fb - last_pos < -4096) {
 800159c:	4b49      	ldr	r3, [pc, #292]	; (80016c4 <CAN1_RX0_IRQHandler+0x1a4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80015a8:	da0b      	bge.n	80015c2 <CAN1_RX0_IRQHandler+0xa2>
		cur_pos += pos_fb - last_pos + 8192;
 80015aa:	4b46      	ldr	r3, [pc, #280]	; (80016c4 <CAN1_RX0_IRQHandler+0x1a4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 80015b6:	4b44      	ldr	r3, [pc, #272]	; (80016c8 <CAN1_RX0_IRQHandler+0x1a8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a42      	ldr	r2, [pc, #264]	; (80016c8 <CAN1_RX0_IRQHandler+0x1a8>)
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	e008      	b.n	80015d4 <CAN1_RX0_IRQHandler+0xb4>
	}
	else {
		cur_pos += pos_fb - last_pos;
 80015c2:	4b40      	ldr	r3, [pc, #256]	; (80016c4 <CAN1_RX0_IRQHandler+0x1a4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	1ad2      	subs	r2, r2, r3
 80015ca:	4b3f      	ldr	r3, [pc, #252]	; (80016c8 <CAN1_RX0_IRQHandler+0x1a8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	4a3d      	ldr	r2, [pc, #244]	; (80016c8 <CAN1_RX0_IRQHandler+0x1a8>)
 80015d2:	6013      	str	r3, [r2, #0]
	}
	last_pos = pos_fb;
 80015d4:	4a3b      	ldr	r2, [pc, #236]	; (80016c4 <CAN1_RX0_IRQHandler+0x1a4>)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6013      	str	r3, [r2, #0]

	int p_target = 8000;
 80015da:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80015de:	607b      	str	r3, [r7, #4]
//	int16_t vel_target = 2000;
	int v_target_p = (p_target - cur_pos);
 80015e0:	4b39      	ldr	r3, [pc, #228]	; (80016c8 <CAN1_RX0_IRQHandler+0x1a8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	617b      	str	r3, [r7, #20]
	if (v_target_p > 4000)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80015f0:	dd02      	ble.n	80015f8 <CAN1_RX0_IRQHandler+0xd8>
		v_target_p = 4000;
 80015f2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80015f6:	617b      	str	r3, [r7, #20]
	if (v_target_p < -4000)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f513 6f7a 	cmn.w	r3, #4000	; 0xfa0
 80015fe:	da01      	bge.n	8001604 <CAN1_RX0_IRQHandler+0xe4>
		v_target_p = -4000;
 8001600:	4b32      	ldr	r3, [pc, #200]	; (80016cc <CAN1_RX0_IRQHandler+0x1ac>)
 8001602:	617b      	str	r3, [r7, #20]
	int16_t vel_target = v_target_p;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	807b      	strh	r3, [r7, #2]


	int32_t current_output = (vel_target - vel_fb) * 20.0;
 8001608:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800160c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff f8d0 	bl	80007b8 <__aeabi_i2d>
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <CAN1_RX0_IRQHandler+0x1b0>)
 800161e:	f7fe fe4f 	bl	80002c0 <__aeabi_dmul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff f92f 	bl	800088c <__aeabi_d2iz>
 800162e:	4603      	mov	r3, r0
 8001630:	613b      	str	r3, [r7, #16]
	if (current_output > 0xfff)
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001638:	db02      	blt.n	8001640 <CAN1_RX0_IRQHandler+0x120>
		current_output = 0xfff;
 800163a:	f640 73ff 	movw	r3, #4095	; 0xfff
 800163e:	613b      	str	r3, [r7, #16]
	if (current_output < -(0xfff))
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8001646:	dc01      	bgt.n	800164c <CAN1_RX0_IRQHandler+0x12c>
		current_output = -(0xfff);
 8001648:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <CAN1_RX0_IRQHandler+0x1b4>)
 800164a:	613b      	str	r3, [r7, #16]

	tx_data[0] = ((current_output >> 8) & 0xff);
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	121b      	asrs	r3, r3, #8
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <CAN1_RX0_IRQHandler+0x1b8>)
 8001654:	701a      	strb	r2, [r3, #0]
	tx_data[1] = (current_output & 0xff);
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <CAN1_RX0_IRQHandler+0x1b8>)
 800165c:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x0F;
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <CAN1_RX0_IRQHandler+0x1b8>)
 8001660:	220f      	movs	r2, #15
 8001662:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8001664:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <CAN1_RX0_IRQHandler+0x1b8>)
 8001666:	2200      	movs	r2, #0
 8001668:	70da      	strb	r2, [r3, #3]
	tx_data[4] = 0x0F;
 800166a:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <CAN1_RX0_IRQHandler+0x1b8>)
 800166c:	220f      	movs	r2, #15
 800166e:	711a      	strb	r2, [r3, #4]
	tx_data[5] = 0x00;
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <CAN1_RX0_IRQHandler+0x1b8>)
 8001672:	2200      	movs	r2, #0
 8001674:	715a      	strb	r2, [r3, #5]
	tx_data[6] = 0x0F;
 8001676:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <CAN1_RX0_IRQHandler+0x1b8>)
 8001678:	220f      	movs	r2, #15
 800167a:	719a      	strb	r2, [r3, #6]
	tx_data[7] = 0x00;
 800167c:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <CAN1_RX0_IRQHandler+0x1b8>)
 800167e:	2200      	movs	r2, #0
 8001680:	71da      	strb	r2, [r3, #7]

	pHeader.DLC=8; //give message size of 1 byte
 8001682:	4b16      	ldr	r3, [pc, #88]	; (80016dc <CAN1_RX0_IRQHandler+0x1bc>)
 8001684:	2208      	movs	r2, #8
 8001686:	611a      	str	r2, [r3, #16]
	pHeader.IDE=CAN_ID_STD; //set identifier to standard
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <CAN1_RX0_IRQHandler+0x1bc>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
	pHeader.RTR=CAN_RTR_DATA; //set data type to remote transmission request?
 800168e:	4b13      	ldr	r3, [pc, #76]	; (80016dc <CAN1_RX0_IRQHandler+0x1bc>)
 8001690:	2200      	movs	r2, #0
 8001692:	60da      	str	r2, [r3, #12]
	pHeader.StdId=0x200; //define a standard identifier, used for message identification by filters (switch this for the other microcontroller)
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <CAN1_RX0_IRQHandler+0x1bc>)
 8001696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169a:	601a      	str	r2, [r3, #0]

	HAL_CAN_AddTxMessage(&hcan1, &pHeader, tx_data, &TxMailbox);
 800169c:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <CAN1_RX0_IRQHandler+0x1c0>)
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <CAN1_RX0_IRQHandler+0x1b8>)
 80016a0:	490e      	ldr	r1, [pc, #56]	; (80016dc <CAN1_RX0_IRQHandler+0x1bc>)
 80016a2:	4803      	ldr	r0, [pc, #12]	; (80016b0 <CAN1_RX0_IRQHandler+0x190>)
 80016a4:	f000 fb58 	bl	8001d58 <HAL_CAN_AddTxMessage>

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200001c4 	.word	0x200001c4
 80016b4:	20000154 	.word	0x20000154
 80016b8:	20000164 	.word	0x20000164
 80016bc:	20000090 	.word	0x20000090
 80016c0:	20000000 	.word	0x20000000
 80016c4:	200000a8 	.word	0x200000a8
 80016c8:	200000a4 	.word	0x200000a4
 80016cc:	fffff060 	.word	0xfffff060
 80016d0:	40340000 	.word	0x40340000
 80016d4:	fffff001 	.word	0xfffff001
 80016d8:	2000024c 	.word	0x2000024c
 80016dc:	20000234 	.word	0x20000234
 80016e0:	2000015c 	.word	0x2000015c

080016e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80016e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016ec:	f001 fd44 	bl	8003178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80016fa:	f002 fc97 	bl	800402c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200001ec 	.word	0x200001ec

08001708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <_sbrk+0x5c>)
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <_sbrk+0x60>)
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <_sbrk+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d102      	bne.n	800172a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <_sbrk+0x64>)
 8001726:	4a12      	ldr	r2, [pc, #72]	; (8001770 <_sbrk+0x68>)
 8001728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	429a      	cmp	r2, r3
 8001736:	d207      	bcs.n	8001748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001738:	f003 fcb0 	bl	800509c <__errno>
 800173c:	4603      	mov	r3, r0
 800173e:	220c      	movs	r2, #12
 8001740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	e009      	b.n	800175c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <_sbrk+0x64>)
 8001758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20020000 	.word	0x20020000
 8001768:	00000400 	.word	0x00000400
 800176c:	20000098 	.word	0x20000098
 8001770:	20000268 	.word	0x20000268

08001774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <SystemInit+0x20>)
 800177a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <SystemInit+0x20>)
 8001780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800179c:	480d      	ldr	r0, [pc, #52]	; (80017d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800179e:	490e      	ldr	r1, [pc, #56]	; (80017d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017a0:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a4:	e002      	b.n	80017ac <LoopCopyDataInit>

080017a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017aa:	3304      	adds	r3, #4

080017ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b0:	d3f9      	bcc.n	80017a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b2:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017b4:	4c0b      	ldr	r4, [pc, #44]	; (80017e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b8:	e001      	b.n	80017be <LoopFillZerobss>

080017ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017bc:	3204      	adds	r2, #4

080017be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c0:	d3fb      	bcc.n	80017ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017c2:	f7ff ffd7 	bl	8001774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017c6:	f003 fc6f 	bl	80050a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ca:	f7ff fa03 	bl	8000bd4 <main>
  bx  lr    
 80017ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80017dc:	08005be4 	.word	0x08005be4
  ldr r2, =_sbss
 80017e0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80017e4:	20000268 	.word	0x20000268

080017e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC_IRQHandler>
	...

080017ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <HAL_Init+0x40>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0d      	ldr	r2, [pc, #52]	; (800182c <HAL_Init+0x40>)
 80017f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0a      	ldr	r2, [pc, #40]	; (800182c <HAL_Init+0x40>)
 8001802:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001806:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a07      	ldr	r2, [pc, #28]	; (800182c <HAL_Init+0x40>)
 800180e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001812:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001814:	2003      	movs	r0, #3
 8001816:	f000 ffbb 	bl	8002790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181a:	2000      	movs	r0, #0
 800181c:	f000 f808 	bl	8001830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001820:	f7ff fcd4 	bl	80011cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023c00 	.word	0x40023c00

08001830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_InitTick+0x54>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_InitTick+0x58>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4619      	mov	r1, r3
 8001842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001846:	fbb3 f3f1 	udiv	r3, r3, r1
 800184a:	fbb2 f3f3 	udiv	r3, r2, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f000 ffd3 	bl	80027fa <HAL_SYSTICK_Config>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e00e      	b.n	800187c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b0f      	cmp	r3, #15
 8001862:	d80a      	bhi.n	800187a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001864:	2200      	movs	r2, #0
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f000 ff9b 	bl	80027a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001870:	4a06      	ldr	r2, [pc, #24]	; (800188c <HAL_InitTick+0x5c>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	e000      	b.n	800187c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000004 	.word	0x20000004
 8001888:	2000000c 	.word	0x2000000c
 800188c:	20000008 	.word	0x20000008

08001890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_IncTick+0x20>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_IncTick+0x24>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <HAL_IncTick+0x24>)
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2000000c 	.word	0x2000000c
 80018b4:	20000254 	.word	0x20000254

080018b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <HAL_GetTick+0x14>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000254 	.word	0x20000254

080018d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d8:	f7ff ffee 	bl	80018b8 <HAL_GetTick>
 80018dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e8:	d005      	beq.n	80018f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_Delay+0x44>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4413      	add	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018f6:	bf00      	nop
 80018f8:	f7ff ffde 	bl	80018b8 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	429a      	cmp	r2, r3
 8001906:	d8f7      	bhi.n	80018f8 <HAL_Delay+0x28>
  {
  }
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	2000000c 	.word	0x2000000c

08001918 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e0ed      	b.n	8001b06 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff fc70 	bl	800121c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0202 	bic.w	r2, r2, #2
 800194a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800194c:	f7ff ffb4 	bl	80018b8 <HAL_GetTick>
 8001950:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001952:	e012      	b.n	800197a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001954:	f7ff ffb0 	bl	80018b8 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b0a      	cmp	r3, #10
 8001960:	d90b      	bls.n	800197a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2205      	movs	r2, #5
 8001972:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e0c5      	b.n	8001b06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1e5      	bne.n	8001954 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001998:	f7ff ff8e 	bl	80018b8 <HAL_GetTick>
 800199c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800199e:	e012      	b.n	80019c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019a0:	f7ff ff8a 	bl	80018b8 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b0a      	cmp	r3, #10
 80019ac:	d90b      	bls.n	80019c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2205      	movs	r2, #5
 80019be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e09f      	b.n	8001b06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0e5      	beq.n	80019a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7e1b      	ldrb	r3, [r3, #24]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d108      	bne.n	80019ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	e007      	b.n	80019fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7e5b      	ldrb	r3, [r3, #25]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d108      	bne.n	8001a18 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e007      	b.n	8001a28 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a26:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	7e9b      	ldrb	r3, [r3, #26]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d108      	bne.n	8001a42 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0220 	orr.w	r2, r2, #32
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	e007      	b.n	8001a52 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0220 	bic.w	r2, r2, #32
 8001a50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7edb      	ldrb	r3, [r3, #27]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d108      	bne.n	8001a6c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0210 	bic.w	r2, r2, #16
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	e007      	b.n	8001a7c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0210 	orr.w	r2, r2, #16
 8001a7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	7f1b      	ldrb	r3, [r3, #28]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d108      	bne.n	8001a96 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 0208 	orr.w	r2, r2, #8
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	e007      	b.n	8001aa6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0208 	bic.w	r2, r2, #8
 8001aa4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	7f5b      	ldrb	r3, [r3, #29]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d108      	bne.n	8001ac0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f042 0204 	orr.w	r2, r2, #4
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	e007      	b.n	8001ad0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0204 	bic.w	r2, r2, #4
 8001ace:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	ea42 0103 	orr.w	r1, r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	1e5a      	subs	r2, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b087      	sub	sp, #28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b26:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b28:	7cfb      	ldrb	r3, [r7, #19]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d003      	beq.n	8001b36 <HAL_CAN_ConfigFilter+0x26>
 8001b2e:	7cfb      	ldrb	r3, [r7, #19]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	f040 80be 	bne.w	8001cb2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001b36:	4b65      	ldr	r3, [pc, #404]	; (8001ccc <HAL_CAN_ConfigFilter+0x1bc>)
 8001b38:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b40:	f043 0201 	orr.w	r2, r3, #1
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b50:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	431a      	orrs	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	f003 031f 	and.w	r3, r3, #31
 8001b76:	2201      	movs	r2, #1
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	401a      	ands	r2, r3
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d123      	bne.n	8001be0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	3248      	adds	r2, #72	; 0x48
 8001bc0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bd4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bd6:	6979      	ldr	r1, [r7, #20]
 8001bd8:	3348      	adds	r3, #72	; 0x48
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d122      	bne.n	8001c2e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	3248      	adds	r2, #72	; 0x48
 8001c0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c24:	6979      	ldr	r1, [r7, #20]
 8001c26:	3348      	adds	r3, #72	; 0x48
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	440b      	add	r3, r1
 8001c2c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	401a      	ands	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c48:	e007      	b.n	8001c5a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	431a      	orrs	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d109      	bne.n	8001c76 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	401a      	ands	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c74:	e007      	b.n	8001c86 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d107      	bne.n	8001c9e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ca4:	f023 0201 	bic.w	r2, r3, #1
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e006      	b.n	8001cc0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
  }
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	371c      	adds	r7, #28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	40006400 	.word	0x40006400

08001cd0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d12e      	bne.n	8001d42 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0201 	bic.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cfc:	f7ff fddc 	bl	80018b8 <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d02:	e012      	b.n	8001d2a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d04:	f7ff fdd8 	bl	80018b8 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b0a      	cmp	r3, #10
 8001d10:	d90b      	bls.n	8001d2a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2205      	movs	r2, #5
 8001d22:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e012      	b.n	8001d50 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1e5      	bne.n	8001d04 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e006      	b.n	8001d50 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
  }
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d6c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d76:	7ffb      	ldrb	r3, [r7, #31]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d003      	beq.n	8001d84 <HAL_CAN_AddTxMessage+0x2c>
 8001d7c:	7ffb      	ldrb	r3, [r7, #31]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	f040 80b8 	bne.w	8001ef4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10a      	bne.n	8001da4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d105      	bne.n	8001da4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 80a0 	beq.w	8001ee4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	0e1b      	lsrs	r3, r3, #24
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d907      	bls.n	8001dc4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e09e      	b.n	8001f02 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10d      	bne.n	8001df2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001de0:	68f9      	ldr	r1, [r7, #12]
 8001de2:	6809      	ldr	r1, [r1, #0]
 8001de4:	431a      	orrs	r2, r3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3318      	adds	r3, #24
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	440b      	add	r3, r1
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	e00f      	b.n	8001e12 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dfc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e02:	68f9      	ldr	r1, [r7, #12]
 8001e04:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001e06:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	3318      	adds	r3, #24
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	440b      	add	r3, r1
 8001e10:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6819      	ldr	r1, [r3, #0]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	691a      	ldr	r2, [r3, #16]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3318      	adds	r3, #24
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	440b      	add	r3, r1
 8001e22:	3304      	adds	r3, #4
 8001e24:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	7d1b      	ldrb	r3, [r3, #20]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d111      	bne.n	8001e52 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	3318      	adds	r3, #24
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	4413      	add	r3, r2
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	6811      	ldr	r1, [r2, #0]
 8001e42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3318      	adds	r3, #24
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3304      	adds	r3, #4
 8001e50:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3307      	adds	r3, #7
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	061a      	lsls	r2, r3, #24
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3306      	adds	r3, #6
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3305      	adds	r3, #5
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	3204      	adds	r2, #4
 8001e72:	7812      	ldrb	r2, [r2, #0]
 8001e74:	4610      	mov	r0, r2
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	6811      	ldr	r1, [r2, #0]
 8001e7a:	ea43 0200 	orr.w	r2, r3, r0
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	440b      	add	r3, r1
 8001e84:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e88:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3303      	adds	r3, #3
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	061a      	lsls	r2, r3, #24
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3302      	adds	r3, #2
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	041b      	lsls	r3, r3, #16
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	021b      	lsls	r3, r3, #8
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	7812      	ldrb	r2, [r2, #0]
 8001eaa:	4610      	mov	r0, r2
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	6811      	ldr	r1, [r2, #0]
 8001eb0:	ea43 0200 	orr.w	r2, r3, r0
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	440b      	add	r3, r1
 8001eba:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ebe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	3318      	adds	r3, #24
 8001ec8:	011b      	lsls	r3, r3, #4
 8001eca:	4413      	add	r3, r2
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	6811      	ldr	r1, [r2, #0]
 8001ed2:	f043 0201 	orr.w	r2, r3, #1
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3318      	adds	r3, #24
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	440b      	add	r3, r1
 8001ede:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e00e      	b.n	8001f02 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e006      	b.n	8001f02 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
  }
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3724      	adds	r7, #36	; 0x24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b087      	sub	sp, #28
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f22:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d003      	beq.n	8001f32 <HAL_CAN_GetRxMessage+0x24>
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	f040 80f3 	bne.w	8002118 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10e      	bne.n	8001f56 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d116      	bne.n	8001f74 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0e7      	b.n	8002126 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d107      	bne.n	8001f74 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0d8      	b.n	8002126 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	331b      	adds	r3, #27
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	4413      	add	r3, r2
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0204 	and.w	r2, r3, #4
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10c      	bne.n	8001fac <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	331b      	adds	r3, #27
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	4413      	add	r3, r2
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	0d5b      	lsrs	r3, r3, #21
 8001fa2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	e00b      	b.n	8001fc4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	331b      	adds	r3, #27
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	4413      	add	r3, r2
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	08db      	lsrs	r3, r3, #3
 8001fbc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	331b      	adds	r3, #27
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	4413      	add	r3, r2
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0202 	and.w	r2, r3, #2
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	331b      	adds	r3, #27
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 020f 	and.w	r2, r3, #15
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	331b      	adds	r3, #27
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3304      	adds	r3, #4
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	0a1b      	lsrs	r3, r3, #8
 8002004:	b2da      	uxtb	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	331b      	adds	r3, #27
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	4413      	add	r3, r2
 8002016:	3304      	adds	r3, #4
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	0c1b      	lsrs	r3, r3, #16
 800201c:	b29a      	uxth	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	4413      	add	r3, r2
 800202c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	4413      	add	r3, r2
 8002042:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0a1a      	lsrs	r2, r3, #8
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	3301      	adds	r3, #1
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	4413      	add	r3, r2
 800205c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	0c1a      	lsrs	r2, r3, #16
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	3302      	adds	r3, #2
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	4413      	add	r3, r2
 8002076:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	0e1a      	lsrs	r2, r3, #24
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	3303      	adds	r3, #3
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	4413      	add	r3, r2
 8002090:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	3304      	adds	r3, #4
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0a1a      	lsrs	r2, r3, #8
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	3305      	adds	r3, #5
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	0c1a      	lsrs	r2, r3, #16
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	3306      	adds	r3, #6
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	4413      	add	r3, r2
 80020dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	0e1a      	lsrs	r2, r3, #24
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	3307      	adds	r3, #7
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d108      	bne.n	8002104 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0220 	orr.w	r2, r2, #32
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	e007      	b.n	8002114 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0220 	orr.w	r2, r2, #32
 8002112:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	e006      	b.n	8002126 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
  }
}
 8002126:	4618      	mov	r0, r3
 8002128:	371c      	adds	r7, #28
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002132:	b480      	push	{r7}
 8002134:	b085      	sub	sp, #20
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002142:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d002      	beq.n	8002150 <HAL_CAN_ActivateNotification+0x1e>
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d109      	bne.n	8002164 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6959      	ldr	r1, [r3, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	e006      	b.n	8002172 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
  }
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b08a      	sub	sp, #40	; 0x28
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d07c      	beq.n	80022be <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d023      	beq.n	8002216 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2201      	movs	r2, #1
 80021d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f983 	bl	80024ec <HAL_CAN_TxMailbox0CompleteCallback>
 80021e6:	e016      	b.n	8002216 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d004      	beq.n	80021fc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
 80021fa:	e00c      	b.n	8002216 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d004      	beq.n	8002210 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
 800220e:	e002      	b.n	8002216 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f989 	bl	8002528 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d024      	beq.n	800226a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002228:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f963 	bl	8002500 <HAL_CAN_TxMailbox1CompleteCallback>
 800223a:	e016      	b.n	800226a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
 800224e:	e00c      	b.n	800226a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002256:	2b00      	cmp	r3, #0
 8002258:	d004      	beq.n	8002264 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
 8002262:	e002      	b.n	800226a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f969 	bl	800253c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d024      	beq.n	80022be <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800227c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f943 	bl	8002514 <HAL_CAN_TxMailbox2CompleteCallback>
 800228e:	e016      	b.n	80022be <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d004      	beq.n	80022a4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
 80022a2:	e00c      	b.n	80022be <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d004      	beq.n	80022b8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
 80022b6:	e002      	b.n	80022be <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f949 	bl	8002550 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00c      	beq.n	80022e2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d007      	beq.n	80022e2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2210      	movs	r2, #16
 80022e0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00b      	beq.n	8002304 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d006      	beq.n	8002304 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2208      	movs	r2, #8
 80022fc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f93a 	bl	8002578 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d009      	beq.n	8002322 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f921 	bl	8002564 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00c      	beq.n	8002346 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b00      	cmp	r3, #0
 8002334:	d007      	beq.n	8002346 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800233c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2210      	movs	r2, #16
 8002344:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00b      	beq.n	8002368 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d006      	beq.n	8002368 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2208      	movs	r2, #8
 8002360:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f91c 	bl	80025a0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	2b00      	cmp	r3, #0
 8002370:	d009      	beq.n	8002386 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f903 	bl	800258c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00b      	beq.n	80023a8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	2b00      	cmp	r3, #0
 8002398:	d006      	beq.n	80023a8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2210      	movs	r2, #16
 80023a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f906 	bl	80025b4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d006      	beq.n	80023ca <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2208      	movs	r2, #8
 80023c2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f8ff 	bl	80025c8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d07b      	beq.n	80024cc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d072      	beq.n	80024c4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	f043 0304 	orr.w	r3, r3, #4
 8002430:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002438:	2b00      	cmp	r3, #0
 800243a:	d043      	beq.n	80024c4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002442:	2b00      	cmp	r3, #0
 8002444:	d03e      	beq.n	80024c4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800244c:	2b60      	cmp	r3, #96	; 0x60
 800244e:	d02b      	beq.n	80024a8 <HAL_CAN_IRQHandler+0x32a>
 8002450:	2b60      	cmp	r3, #96	; 0x60
 8002452:	d82e      	bhi.n	80024b2 <HAL_CAN_IRQHandler+0x334>
 8002454:	2b50      	cmp	r3, #80	; 0x50
 8002456:	d022      	beq.n	800249e <HAL_CAN_IRQHandler+0x320>
 8002458:	2b50      	cmp	r3, #80	; 0x50
 800245a:	d82a      	bhi.n	80024b2 <HAL_CAN_IRQHandler+0x334>
 800245c:	2b40      	cmp	r3, #64	; 0x40
 800245e:	d019      	beq.n	8002494 <HAL_CAN_IRQHandler+0x316>
 8002460:	2b40      	cmp	r3, #64	; 0x40
 8002462:	d826      	bhi.n	80024b2 <HAL_CAN_IRQHandler+0x334>
 8002464:	2b30      	cmp	r3, #48	; 0x30
 8002466:	d010      	beq.n	800248a <HAL_CAN_IRQHandler+0x30c>
 8002468:	2b30      	cmp	r3, #48	; 0x30
 800246a:	d822      	bhi.n	80024b2 <HAL_CAN_IRQHandler+0x334>
 800246c:	2b10      	cmp	r3, #16
 800246e:	d002      	beq.n	8002476 <HAL_CAN_IRQHandler+0x2f8>
 8002470:	2b20      	cmp	r3, #32
 8002472:	d005      	beq.n	8002480 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002474:	e01d      	b.n	80024b2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	f043 0308 	orr.w	r3, r3, #8
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800247e:	e019      	b.n	80024b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	f043 0310 	orr.w	r3, r3, #16
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002488:	e014      	b.n	80024b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	f043 0320 	orr.w	r3, r3, #32
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002492:	e00f      	b.n	80024b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800249c:	e00a      	b.n	80024b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024a6:	e005      	b.n	80024b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024b0:	e000      	b.n	80024b4 <HAL_CAN_IRQHandler+0x336>
            break;
 80024b2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699a      	ldr	r2, [r3, #24]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024c2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2204      	movs	r2, #4
 80024ca:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d008      	beq.n	80024e4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f87c 	bl	80025dc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80024e4:	bf00      	nop
 80024e6:	3728      	adds	r7, #40	; 0x28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800260c:	4013      	ands	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800261c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002622:	4a04      	ldr	r2, [pc, #16]	; (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	60d3      	str	r3, [r2, #12]
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <__NVIC_GetPriorityGrouping+0x18>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	f003 0307 	and.w	r3, r3, #7
}
 8002646:	4618      	mov	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	2b00      	cmp	r3, #0
 8002664:	db0b      	blt.n	800267e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	4907      	ldr	r1, [pc, #28]	; (800268c <__NVIC_EnableIRQ+0x38>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	2001      	movs	r0, #1
 8002676:	fa00 f202 	lsl.w	r2, r0, r2
 800267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000e100 	.word	0xe000e100

08002690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	6039      	str	r1, [r7, #0]
 800269a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	db0a      	blt.n	80026ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	490c      	ldr	r1, [pc, #48]	; (80026dc <__NVIC_SetPriority+0x4c>)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	0112      	lsls	r2, r2, #4
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	440b      	add	r3, r1
 80026b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b8:	e00a      	b.n	80026d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4908      	ldr	r1, [pc, #32]	; (80026e0 <__NVIC_SetPriority+0x50>)
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	3b04      	subs	r3, #4
 80026c8:	0112      	lsls	r2, r2, #4
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	440b      	add	r3, r1
 80026ce:	761a      	strb	r2, [r3, #24]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000e100 	.word	0xe000e100
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f1c3 0307 	rsb	r3, r3, #7
 80026fe:	2b04      	cmp	r3, #4
 8002700:	bf28      	it	cs
 8002702:	2304      	movcs	r3, #4
 8002704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3304      	adds	r3, #4
 800270a:	2b06      	cmp	r3, #6
 800270c:	d902      	bls.n	8002714 <NVIC_EncodePriority+0x30>
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3b03      	subs	r3, #3
 8002712:	e000      	b.n	8002716 <NVIC_EncodePriority+0x32>
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	f04f 32ff 	mov.w	r2, #4294967295
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43da      	mvns	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	401a      	ands	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800272c:	f04f 31ff 	mov.w	r1, #4294967295
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	43d9      	mvns	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	4313      	orrs	r3, r2
         );
}
 800273e:	4618      	mov	r0, r3
 8002740:	3724      	adds	r7, #36	; 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800275c:	d301      	bcc.n	8002762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275e:	2301      	movs	r3, #1
 8002760:	e00f      	b.n	8002782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002762:	4a0a      	ldr	r2, [pc, #40]	; (800278c <SysTick_Config+0x40>)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276a:	210f      	movs	r1, #15
 800276c:	f04f 30ff 	mov.w	r0, #4294967295
 8002770:	f7ff ff8e 	bl	8002690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <SysTick_Config+0x40>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277a:	4b04      	ldr	r3, [pc, #16]	; (800278c <SysTick_Config+0x40>)
 800277c:	2207      	movs	r2, #7
 800277e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	e000e010 	.word	0xe000e010

08002790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff ff29 	bl	80025f0 <__NVIC_SetPriorityGrouping>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	4603      	mov	r3, r0
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b8:	f7ff ff3e 	bl	8002638 <__NVIC_GetPriorityGrouping>
 80027bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	6978      	ldr	r0, [r7, #20]
 80027c4:	f7ff ff8e 	bl	80026e4 <NVIC_EncodePriority>
 80027c8:	4602      	mov	r2, r0
 80027ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ce:	4611      	mov	r1, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff5d 	bl	8002690 <__NVIC_SetPriority>
}
 80027d6:	bf00      	nop
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	4603      	mov	r3, r0
 80027e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff31 	bl	8002654 <__NVIC_EnableIRQ>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ffa2 	bl	800274c <SysTick_Config>
 8002808:	4603      	mov	r3, r0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002820:	f7ff f84a 	bl	80018b8 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e099      	b.n	8002964 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002850:	e00f      	b.n	8002872 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002852:	f7ff f831 	bl	80018b8 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b05      	cmp	r3, #5
 800285e:	d908      	bls.n	8002872 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2220      	movs	r2, #32
 8002864:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2203      	movs	r2, #3
 800286a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e078      	b.n	8002964 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1e8      	bne.n	8002852 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	4b38      	ldr	r3, [pc, #224]	; (800296c <HAL_DMA_Init+0x158>)
 800288c:	4013      	ands	r3, r2
 800288e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800289e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d107      	bne.n	80028dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	4313      	orrs	r3, r2
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f023 0307 	bic.w	r3, r3, #7
 80028f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	2b04      	cmp	r3, #4
 8002904:	d117      	bne.n	8002936 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00e      	beq.n	8002936 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f9e9 	bl	8002cf0 <DMA_CheckFifoParam>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2240      	movs	r2, #64	; 0x40
 8002928:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002932:	2301      	movs	r3, #1
 8002934:	e016      	b.n	8002964 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f9a0 	bl	8002c84 <DMA_CalcBaseAndBitshift>
 8002944:	4603      	mov	r3, r0
 8002946:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294c:	223f      	movs	r2, #63	; 0x3f
 800294e:	409a      	lsls	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	f010803f 	.word	0xf010803f

08002970 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800297c:	4b92      	ldr	r3, [pc, #584]	; (8002bc8 <HAL_DMA_IRQHandler+0x258>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a92      	ldr	r2, [pc, #584]	; (8002bcc <HAL_DMA_IRQHandler+0x25c>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	0a9b      	lsrs	r3, r3, #10
 8002988:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	2208      	movs	r2, #8
 800299c:	409a      	lsls	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d01a      	beq.n	80029dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d013      	beq.n	80029dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0204 	bic.w	r2, r2, #4
 80029c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c8:	2208      	movs	r2, #8
 80029ca:	409a      	lsls	r2, r3
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d4:	f043 0201 	orr.w	r2, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e0:	2201      	movs	r2, #1
 80029e2:	409a      	lsls	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d012      	beq.n	8002a12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00b      	beq.n	8002a12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fe:	2201      	movs	r2, #1
 8002a00:	409a      	lsls	r2, r3
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0a:	f043 0202 	orr.w	r2, r3, #2
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a16:	2204      	movs	r2, #4
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d012      	beq.n	8002a48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00b      	beq.n	8002a48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a34:	2204      	movs	r2, #4
 8002a36:	409a      	lsls	r2, r3
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a40:	f043 0204 	orr.w	r2, r3, #4
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	409a      	lsls	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d043      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d03c      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6a:	2210      	movs	r2, #16
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d018      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d108      	bne.n	8002aa0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d024      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	4798      	blx	r3
 8002a9e:	e01f      	b.n	8002ae0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d01b      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	4798      	blx	r3
 8002ab0:	e016      	b.n	8002ae0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d107      	bne.n	8002ad0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0208 	bic.w	r2, r2, #8
 8002ace:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 808e 	beq.w	8002c0e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0310 	and.w	r3, r3, #16
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 8086 	beq.w	8002c0e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b06:	2220      	movs	r2, #32
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b05      	cmp	r3, #5
 8002b18:	d136      	bne.n	8002b88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0216 	bic.w	r2, r2, #22
 8002b28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695a      	ldr	r2, [r3, #20]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d103      	bne.n	8002b4a <HAL_DMA_IRQHandler+0x1da>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d007      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0208 	bic.w	r2, r2, #8
 8002b58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5e:	223f      	movs	r2, #63	; 0x3f
 8002b60:	409a      	lsls	r2, r3
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d07d      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	4798      	blx	r3
        }
        return;
 8002b86:	e078      	b.n	8002c7a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d01c      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d108      	bne.n	8002bb6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d030      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	4798      	blx	r3
 8002bb4:	e02b      	b.n	8002c0e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d027      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	4798      	blx	r3
 8002bc6:	e022      	b.n	8002c0e <HAL_DMA_IRQHandler+0x29e>
 8002bc8:	20000004 	.word	0x20000004
 8002bcc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10f      	bne.n	8002bfe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0210 	bic.w	r2, r2, #16
 8002bec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d032      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d022      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2205      	movs	r2, #5
 8002c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0201 	bic.w	r2, r2, #1
 8002c38:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d307      	bcc.n	8002c56 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1f2      	bne.n	8002c3a <HAL_DMA_IRQHandler+0x2ca>
 8002c54:	e000      	b.n	8002c58 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c56:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	4798      	blx	r3
 8002c78:	e000      	b.n	8002c7c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002c7a:	bf00      	nop
    }
  }
}
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop

08002c84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	3b10      	subs	r3, #16
 8002c94:	4a14      	ldr	r2, [pc, #80]	; (8002ce8 <DMA_CalcBaseAndBitshift+0x64>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	091b      	lsrs	r3, r3, #4
 8002c9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c9e:	4a13      	ldr	r2, [pc, #76]	; (8002cec <DMA_CalcBaseAndBitshift+0x68>)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d909      	bls.n	8002cc6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cba:	f023 0303 	bic.w	r3, r3, #3
 8002cbe:	1d1a      	adds	r2, r3, #4
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	659a      	str	r2, [r3, #88]	; 0x58
 8002cc4:	e007      	b.n	8002cd6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cce:	f023 0303 	bic.w	r3, r3, #3
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	aaaaaaab 	.word	0xaaaaaaab
 8002cec:	08005b98 	.word	0x08005b98

08002cf0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d11f      	bne.n	8002d4a <DMA_CheckFifoParam+0x5a>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d856      	bhi.n	8002dbe <DMA_CheckFifoParam+0xce>
 8002d10:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <DMA_CheckFifoParam+0x28>)
 8002d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d16:	bf00      	nop
 8002d18:	08002d29 	.word	0x08002d29
 8002d1c:	08002d3b 	.word	0x08002d3b
 8002d20:	08002d29 	.word	0x08002d29
 8002d24:	08002dbf 	.word	0x08002dbf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d046      	beq.n	8002dc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d38:	e043      	b.n	8002dc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d42:	d140      	bne.n	8002dc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d48:	e03d      	b.n	8002dc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d52:	d121      	bne.n	8002d98 <DMA_CheckFifoParam+0xa8>
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d837      	bhi.n	8002dca <DMA_CheckFifoParam+0xda>
 8002d5a:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <DMA_CheckFifoParam+0x70>)
 8002d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d60:	08002d71 	.word	0x08002d71
 8002d64:	08002d77 	.word	0x08002d77
 8002d68:	08002d71 	.word	0x08002d71
 8002d6c:	08002d89 	.word	0x08002d89
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      break;
 8002d74:	e030      	b.n	8002dd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d025      	beq.n	8002dce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d86:	e022      	b.n	8002dce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d90:	d11f      	bne.n	8002dd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d96:	e01c      	b.n	8002dd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d903      	bls.n	8002da6 <DMA_CheckFifoParam+0xb6>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d003      	beq.n	8002dac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002da4:	e018      	b.n	8002dd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
      break;
 8002daa:	e015      	b.n	8002dd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00e      	beq.n	8002dd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
      break;
 8002dbc:	e00b      	b.n	8002dd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002dbe:	bf00      	nop
 8002dc0:	e00a      	b.n	8002dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dc2:	bf00      	nop
 8002dc4:	e008      	b.n	8002dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dc6:	bf00      	nop
 8002dc8:	e006      	b.n	8002dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dca:	bf00      	nop
 8002dcc:	e004      	b.n	8002dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dce:	bf00      	nop
 8002dd0:	e002      	b.n	8002dd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002dd2:	bf00      	nop
 8002dd4:	e000      	b.n	8002dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dd6:	bf00      	nop
    }
  } 
  
  return status; 
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop

08002de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b089      	sub	sp, #36	; 0x24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
 8002e02:	e165      	b.n	80030d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e04:	2201      	movs	r2, #1
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4013      	ands	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	f040 8154 	bne.w	80030ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d005      	beq.n	8002e3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d130      	bne.n	8002e9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	2203      	movs	r2, #3
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e70:	2201      	movs	r2, #1
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f003 0201 	and.w	r2, r3, #1
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d017      	beq.n	8002ed8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d123      	bne.n	8002f2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	08da      	lsrs	r2, r3, #3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3208      	adds	r2, #8
 8002eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	220f      	movs	r2, #15
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	08da      	lsrs	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3208      	adds	r2, #8
 8002f26:	69b9      	ldr	r1, [r7, #24]
 8002f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	2203      	movs	r2, #3
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 0203 	and.w	r2, r3, #3
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 80ae 	beq.w	80030ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	4b5d      	ldr	r3, [pc, #372]	; (80030e8 <HAL_GPIO_Init+0x300>)
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	4a5c      	ldr	r2, [pc, #368]	; (80030e8 <HAL_GPIO_Init+0x300>)
 8002f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f7e:	4b5a      	ldr	r3, [pc, #360]	; (80030e8 <HAL_GPIO_Init+0x300>)
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f8a:	4a58      	ldr	r2, [pc, #352]	; (80030ec <HAL_GPIO_Init+0x304>)
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	089b      	lsrs	r3, r3, #2
 8002f90:	3302      	adds	r3, #2
 8002f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	220f      	movs	r2, #15
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4013      	ands	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a4f      	ldr	r2, [pc, #316]	; (80030f0 <HAL_GPIO_Init+0x308>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d025      	beq.n	8003002 <HAL_GPIO_Init+0x21a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a4e      	ldr	r2, [pc, #312]	; (80030f4 <HAL_GPIO_Init+0x30c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d01f      	beq.n	8002ffe <HAL_GPIO_Init+0x216>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a4d      	ldr	r2, [pc, #308]	; (80030f8 <HAL_GPIO_Init+0x310>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d019      	beq.n	8002ffa <HAL_GPIO_Init+0x212>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a4c      	ldr	r2, [pc, #304]	; (80030fc <HAL_GPIO_Init+0x314>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d013      	beq.n	8002ff6 <HAL_GPIO_Init+0x20e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a4b      	ldr	r2, [pc, #300]	; (8003100 <HAL_GPIO_Init+0x318>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00d      	beq.n	8002ff2 <HAL_GPIO_Init+0x20a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a4a      	ldr	r2, [pc, #296]	; (8003104 <HAL_GPIO_Init+0x31c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d007      	beq.n	8002fee <HAL_GPIO_Init+0x206>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a49      	ldr	r2, [pc, #292]	; (8003108 <HAL_GPIO_Init+0x320>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d101      	bne.n	8002fea <HAL_GPIO_Init+0x202>
 8002fe6:	2306      	movs	r3, #6
 8002fe8:	e00c      	b.n	8003004 <HAL_GPIO_Init+0x21c>
 8002fea:	2307      	movs	r3, #7
 8002fec:	e00a      	b.n	8003004 <HAL_GPIO_Init+0x21c>
 8002fee:	2305      	movs	r3, #5
 8002ff0:	e008      	b.n	8003004 <HAL_GPIO_Init+0x21c>
 8002ff2:	2304      	movs	r3, #4
 8002ff4:	e006      	b.n	8003004 <HAL_GPIO_Init+0x21c>
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e004      	b.n	8003004 <HAL_GPIO_Init+0x21c>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e002      	b.n	8003004 <HAL_GPIO_Init+0x21c>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <HAL_GPIO_Init+0x21c>
 8003002:	2300      	movs	r3, #0
 8003004:	69fa      	ldr	r2, [r7, #28]
 8003006:	f002 0203 	and.w	r2, r2, #3
 800300a:	0092      	lsls	r2, r2, #2
 800300c:	4093      	lsls	r3, r2
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003014:	4935      	ldr	r1, [pc, #212]	; (80030ec <HAL_GPIO_Init+0x304>)
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	089b      	lsrs	r3, r3, #2
 800301a:	3302      	adds	r3, #2
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003022:	4b3a      	ldr	r3, [pc, #232]	; (800310c <HAL_GPIO_Init+0x324>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003046:	4a31      	ldr	r2, [pc, #196]	; (800310c <HAL_GPIO_Init+0x324>)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800304c:	4b2f      	ldr	r3, [pc, #188]	; (800310c <HAL_GPIO_Init+0x324>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003070:	4a26      	ldr	r2, [pc, #152]	; (800310c <HAL_GPIO_Init+0x324>)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003076:	4b25      	ldr	r3, [pc, #148]	; (800310c <HAL_GPIO_Init+0x324>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800309a:	4a1c      	ldr	r2, [pc, #112]	; (800310c <HAL_GPIO_Init+0x324>)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030a0:	4b1a      	ldr	r3, [pc, #104]	; (800310c <HAL_GPIO_Init+0x324>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030c4:	4a11      	ldr	r2, [pc, #68]	; (800310c <HAL_GPIO_Init+0x324>)
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3301      	adds	r3, #1
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2b0f      	cmp	r3, #15
 80030d4:	f67f ae96 	bls.w	8002e04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop
 80030dc:	3724      	adds	r7, #36	; 0x24
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40013800 	.word	0x40013800
 80030f0:	40020000 	.word	0x40020000
 80030f4:	40020400 	.word	0x40020400
 80030f8:	40020800 	.word	0x40020800
 80030fc:	40020c00 	.word	0x40020c00
 8003100:	40021000 	.word	0x40021000
 8003104:	40021400 	.word	0x40021400
 8003108:	40021800 	.word	0x40021800
 800310c:	40013c00 	.word	0x40013c00

08003110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	807b      	strh	r3, [r7, #2]
 800311c:	4613      	mov	r3, r2
 800311e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003120:	787b      	ldrb	r3, [r7, #1]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003126:	887a      	ldrh	r2, [r7, #2]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800312c:	e003      	b.n	8003136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800312e:	887b      	ldrh	r3, [r7, #2]
 8003130:	041a      	lsls	r2, r3, #16
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	619a      	str	r2, [r3, #24]
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003142:	b480      	push	{r7}
 8003144:	b085      	sub	sp, #20
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	460b      	mov	r3, r1
 800314c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003154:	887a      	ldrh	r2, [r7, #2]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4013      	ands	r3, r2
 800315a:	041a      	lsls	r2, r3, #16
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	43d9      	mvns	r1, r3
 8003160:	887b      	ldrh	r3, [r7, #2]
 8003162:	400b      	ands	r3, r1
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	619a      	str	r2, [r3, #24]
}
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003182:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	4013      	ands	r3, r2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d006      	beq.n	800319c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800318e:	4a05      	ldr	r2, [pc, #20]	; (80031a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003190:	88fb      	ldrh	r3, [r7, #6]
 8003192:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd ffbe 	bl	8001118 <HAL_GPIO_EXTI_Callback>
  }
}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40013c00 	.word	0x40013c00

080031a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0cc      	b.n	8003356 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031bc:	4b68      	ldr	r3, [pc, #416]	; (8003360 <HAL_RCC_ClockConfig+0x1b8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d90c      	bls.n	80031e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ca:	4b65      	ldr	r3, [pc, #404]	; (8003360 <HAL_RCC_ClockConfig+0x1b8>)
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d2:	4b63      	ldr	r3, [pc, #396]	; (8003360 <HAL_RCC_ClockConfig+0x1b8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0b8      	b.n	8003356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d020      	beq.n	8003232 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031fc:	4b59      	ldr	r3, [pc, #356]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	4a58      	ldr	r2, [pc, #352]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003206:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003214:	4b53      	ldr	r3, [pc, #332]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4a52      	ldr	r2, [pc, #328]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800321e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003220:	4b50      	ldr	r3, [pc, #320]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	494d      	ldr	r1, [pc, #308]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	4313      	orrs	r3, r2
 8003230:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d044      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d107      	bne.n	8003256 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003246:	4b47      	ldr	r3, [pc, #284]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d119      	bne.n	8003286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e07f      	b.n	8003356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d003      	beq.n	8003266 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003262:	2b03      	cmp	r3, #3
 8003264:	d107      	bne.n	8003276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003266:	4b3f      	ldr	r3, [pc, #252]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e06f      	b.n	8003356 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003276:	4b3b      	ldr	r3, [pc, #236]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e067      	b.n	8003356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003286:	4b37      	ldr	r3, [pc, #220]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f023 0203 	bic.w	r2, r3, #3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	4934      	ldr	r1, [pc, #208]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 8003294:	4313      	orrs	r3, r2
 8003296:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003298:	f7fe fb0e 	bl	80018b8 <HAL_GetTick>
 800329c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329e:	e00a      	b.n	80032b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a0:	f7fe fb0a 	bl	80018b8 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e04f      	b.n	8003356 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b6:	4b2b      	ldr	r3, [pc, #172]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 020c 	and.w	r2, r3, #12
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d1eb      	bne.n	80032a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032c8:	4b25      	ldr	r3, [pc, #148]	; (8003360 <HAL_RCC_ClockConfig+0x1b8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d20c      	bcs.n	80032f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d6:	4b22      	ldr	r3, [pc, #136]	; (8003360 <HAL_RCC_ClockConfig+0x1b8>)
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032de:	4b20      	ldr	r3, [pc, #128]	; (8003360 <HAL_RCC_ClockConfig+0x1b8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e032      	b.n	8003356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032fc:	4b19      	ldr	r3, [pc, #100]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4916      	ldr	r1, [pc, #88]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d009      	beq.n	800332e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800331a:	4b12      	ldr	r3, [pc, #72]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	490e      	ldr	r1, [pc, #56]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	4313      	orrs	r3, r2
 800332c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800332e:	f000 f855 	bl	80033dc <HAL_RCC_GetSysClockFreq>
 8003332:	4602      	mov	r2, r0
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	091b      	lsrs	r3, r3, #4
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	490a      	ldr	r1, [pc, #40]	; (8003368 <HAL_RCC_ClockConfig+0x1c0>)
 8003340:	5ccb      	ldrb	r3, [r1, r3]
 8003342:	fa22 f303 	lsr.w	r3, r2, r3
 8003346:	4a09      	ldr	r2, [pc, #36]	; (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800334a:	4b09      	ldr	r3, [pc, #36]	; (8003370 <HAL_RCC_ClockConfig+0x1c8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7fe fa6e 	bl	8001830 <HAL_InitTick>

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40023c00 	.word	0x40023c00
 8003364:	40023800 	.word	0x40023800
 8003368:	08005b80 	.word	0x08005b80
 800336c:	20000004 	.word	0x20000004
 8003370:	20000008 	.word	0x20000008

08003374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003378:	4b03      	ldr	r3, [pc, #12]	; (8003388 <HAL_RCC_GetHCLKFreq+0x14>)
 800337a:	681b      	ldr	r3, [r3, #0]
}
 800337c:	4618      	mov	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	20000004 	.word	0x20000004

0800338c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003390:	f7ff fff0 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 8003394:	4602      	mov	r2, r0
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	0a9b      	lsrs	r3, r3, #10
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	4903      	ldr	r1, [pc, #12]	; (80033b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a2:	5ccb      	ldrb	r3, [r1, r3]
 80033a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40023800 	.word	0x40023800
 80033b0:	08005b90 	.word	0x08005b90

080033b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033b8:	f7ff ffdc 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 80033bc:	4602      	mov	r2, r0
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	0b5b      	lsrs	r3, r3, #13
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	4903      	ldr	r1, [pc, #12]	; (80033d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ca:	5ccb      	ldrb	r3, [r1, r3]
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40023800 	.word	0x40023800
 80033d8:	08005b90 	.word	0x08005b90

080033dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e0:	b088      	sub	sp, #32
 80033e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033f8:	4bce      	ldr	r3, [pc, #824]	; (8003734 <HAL_RCC_GetSysClockFreq+0x358>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 030c 	and.w	r3, r3, #12
 8003400:	2b0c      	cmp	r3, #12
 8003402:	f200 818d 	bhi.w	8003720 <HAL_RCC_GetSysClockFreq+0x344>
 8003406:	a201      	add	r2, pc, #4	; (adr r2, 800340c <HAL_RCC_GetSysClockFreq+0x30>)
 8003408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340c:	08003441 	.word	0x08003441
 8003410:	08003721 	.word	0x08003721
 8003414:	08003721 	.word	0x08003721
 8003418:	08003721 	.word	0x08003721
 800341c:	08003447 	.word	0x08003447
 8003420:	08003721 	.word	0x08003721
 8003424:	08003721 	.word	0x08003721
 8003428:	08003721 	.word	0x08003721
 800342c:	0800344d 	.word	0x0800344d
 8003430:	08003721 	.word	0x08003721
 8003434:	08003721 	.word	0x08003721
 8003438:	08003721 	.word	0x08003721
 800343c:	080035c1 	.word	0x080035c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003440:	4bbd      	ldr	r3, [pc, #756]	; (8003738 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003442:	61bb      	str	r3, [r7, #24]
       break;
 8003444:	e16f      	b.n	8003726 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003446:	4bbd      	ldr	r3, [pc, #756]	; (800373c <HAL_RCC_GetSysClockFreq+0x360>)
 8003448:	61bb      	str	r3, [r7, #24]
      break;
 800344a:	e16c      	b.n	8003726 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800344c:	4bb9      	ldr	r3, [pc, #740]	; (8003734 <HAL_RCC_GetSysClockFreq+0x358>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003454:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003456:	4bb7      	ldr	r3, [pc, #732]	; (8003734 <HAL_RCC_GetSysClockFreq+0x358>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d053      	beq.n	800350a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003462:	4bb4      	ldr	r3, [pc, #720]	; (8003734 <HAL_RCC_GetSysClockFreq+0x358>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	099b      	lsrs	r3, r3, #6
 8003468:	461a      	mov	r2, r3
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003472:	f04f 0100 	mov.w	r1, #0
 8003476:	ea02 0400 	and.w	r4, r2, r0
 800347a:	603c      	str	r4, [r7, #0]
 800347c:	400b      	ands	r3, r1
 800347e:	607b      	str	r3, [r7, #4]
 8003480:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003484:	4620      	mov	r0, r4
 8003486:	4629      	mov	r1, r5
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	014b      	lsls	r3, r1, #5
 8003492:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003496:	0142      	lsls	r2, r0, #5
 8003498:	4610      	mov	r0, r2
 800349a:	4619      	mov	r1, r3
 800349c:	4623      	mov	r3, r4
 800349e:	1ac0      	subs	r0, r0, r3
 80034a0:	462b      	mov	r3, r5
 80034a2:	eb61 0103 	sbc.w	r1, r1, r3
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	018b      	lsls	r3, r1, #6
 80034b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034b4:	0182      	lsls	r2, r0, #6
 80034b6:	1a12      	subs	r2, r2, r0
 80034b8:	eb63 0301 	sbc.w	r3, r3, r1
 80034bc:	f04f 0000 	mov.w	r0, #0
 80034c0:	f04f 0100 	mov.w	r1, #0
 80034c4:	00d9      	lsls	r1, r3, #3
 80034c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034ca:	00d0      	lsls	r0, r2, #3
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4621      	mov	r1, r4
 80034d2:	1852      	adds	r2, r2, r1
 80034d4:	4629      	mov	r1, r5
 80034d6:	eb43 0101 	adc.w	r1, r3, r1
 80034da:	460b      	mov	r3, r1
 80034dc:	f04f 0000 	mov.w	r0, #0
 80034e0:	f04f 0100 	mov.w	r1, #0
 80034e4:	0259      	lsls	r1, r3, #9
 80034e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80034ea:	0250      	lsls	r0, r2, #9
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	461a      	mov	r2, r3
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	f7fd f9ee 	bl	80008dc <__aeabi_uldivmod>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4613      	mov	r3, r2
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	e04c      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800350a:	4b8a      	ldr	r3, [pc, #552]	; (8003734 <HAL_RCC_GetSysClockFreq+0x358>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	099b      	lsrs	r3, r3, #6
 8003510:	461a      	mov	r2, r3
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	f240 10ff 	movw	r0, #511	; 0x1ff
 800351a:	f04f 0100 	mov.w	r1, #0
 800351e:	ea02 0a00 	and.w	sl, r2, r0
 8003522:	ea03 0b01 	and.w	fp, r3, r1
 8003526:	4650      	mov	r0, sl
 8003528:	4659      	mov	r1, fp
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	014b      	lsls	r3, r1, #5
 8003534:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003538:	0142      	lsls	r2, r0, #5
 800353a:	4610      	mov	r0, r2
 800353c:	4619      	mov	r1, r3
 800353e:	ebb0 000a 	subs.w	r0, r0, sl
 8003542:	eb61 010b 	sbc.w	r1, r1, fp
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	018b      	lsls	r3, r1, #6
 8003550:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003554:	0182      	lsls	r2, r0, #6
 8003556:	1a12      	subs	r2, r2, r0
 8003558:	eb63 0301 	sbc.w	r3, r3, r1
 800355c:	f04f 0000 	mov.w	r0, #0
 8003560:	f04f 0100 	mov.w	r1, #0
 8003564:	00d9      	lsls	r1, r3, #3
 8003566:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800356a:	00d0      	lsls	r0, r2, #3
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	eb12 020a 	adds.w	r2, r2, sl
 8003574:	eb43 030b 	adc.w	r3, r3, fp
 8003578:	f04f 0000 	mov.w	r0, #0
 800357c:	f04f 0100 	mov.w	r1, #0
 8003580:	0299      	lsls	r1, r3, #10
 8003582:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003586:	0290      	lsls	r0, r2, #10
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4610      	mov	r0, r2
 800358e:	4619      	mov	r1, r3
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	461a      	mov	r2, r3
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	f7fd f9a0 	bl	80008dc <__aeabi_uldivmod>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4613      	mov	r3, r2
 80035a2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035a4:	4b63      	ldr	r3, [pc, #396]	; (8003734 <HAL_RCC_GetSysClockFreq+0x358>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	0c1b      	lsrs	r3, r3, #16
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	3301      	adds	r3, #1
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035bc:	61bb      	str	r3, [r7, #24]
      break;
 80035be:	e0b2      	b.n	8003726 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035c0:	4b5c      	ldr	r3, [pc, #368]	; (8003734 <HAL_RCC_GetSysClockFreq+0x358>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035c8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ca:	4b5a      	ldr	r3, [pc, #360]	; (8003734 <HAL_RCC_GetSysClockFreq+0x358>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d04d      	beq.n	8003672 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d6:	4b57      	ldr	r3, [pc, #348]	; (8003734 <HAL_RCC_GetSysClockFreq+0x358>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	099b      	lsrs	r3, r3, #6
 80035dc:	461a      	mov	r2, r3
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035e6:	f04f 0100 	mov.w	r1, #0
 80035ea:	ea02 0800 	and.w	r8, r2, r0
 80035ee:	ea03 0901 	and.w	r9, r3, r1
 80035f2:	4640      	mov	r0, r8
 80035f4:	4649      	mov	r1, r9
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	014b      	lsls	r3, r1, #5
 8003600:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003604:	0142      	lsls	r2, r0, #5
 8003606:	4610      	mov	r0, r2
 8003608:	4619      	mov	r1, r3
 800360a:	ebb0 0008 	subs.w	r0, r0, r8
 800360e:	eb61 0109 	sbc.w	r1, r1, r9
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	018b      	lsls	r3, r1, #6
 800361c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003620:	0182      	lsls	r2, r0, #6
 8003622:	1a12      	subs	r2, r2, r0
 8003624:	eb63 0301 	sbc.w	r3, r3, r1
 8003628:	f04f 0000 	mov.w	r0, #0
 800362c:	f04f 0100 	mov.w	r1, #0
 8003630:	00d9      	lsls	r1, r3, #3
 8003632:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003636:	00d0      	lsls	r0, r2, #3
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	eb12 0208 	adds.w	r2, r2, r8
 8003640:	eb43 0309 	adc.w	r3, r3, r9
 8003644:	f04f 0000 	mov.w	r0, #0
 8003648:	f04f 0100 	mov.w	r1, #0
 800364c:	0259      	lsls	r1, r3, #9
 800364e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003652:	0250      	lsls	r0, r2, #9
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4610      	mov	r0, r2
 800365a:	4619      	mov	r1, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	461a      	mov	r2, r3
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	f7fd f93a 	bl	80008dc <__aeabi_uldivmod>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4613      	mov	r3, r2
 800366e:	61fb      	str	r3, [r7, #28]
 8003670:	e04a      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003672:	4b30      	ldr	r3, [pc, #192]	; (8003734 <HAL_RCC_GetSysClockFreq+0x358>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	099b      	lsrs	r3, r3, #6
 8003678:	461a      	mov	r2, r3
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003682:	f04f 0100 	mov.w	r1, #0
 8003686:	ea02 0400 	and.w	r4, r2, r0
 800368a:	ea03 0501 	and.w	r5, r3, r1
 800368e:	4620      	mov	r0, r4
 8003690:	4629      	mov	r1, r5
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	014b      	lsls	r3, r1, #5
 800369c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036a0:	0142      	lsls	r2, r0, #5
 80036a2:	4610      	mov	r0, r2
 80036a4:	4619      	mov	r1, r3
 80036a6:	1b00      	subs	r0, r0, r4
 80036a8:	eb61 0105 	sbc.w	r1, r1, r5
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	018b      	lsls	r3, r1, #6
 80036b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036ba:	0182      	lsls	r2, r0, #6
 80036bc:	1a12      	subs	r2, r2, r0
 80036be:	eb63 0301 	sbc.w	r3, r3, r1
 80036c2:	f04f 0000 	mov.w	r0, #0
 80036c6:	f04f 0100 	mov.w	r1, #0
 80036ca:	00d9      	lsls	r1, r3, #3
 80036cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036d0:	00d0      	lsls	r0, r2, #3
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	1912      	adds	r2, r2, r4
 80036d8:	eb45 0303 	adc.w	r3, r5, r3
 80036dc:	f04f 0000 	mov.w	r0, #0
 80036e0:	f04f 0100 	mov.w	r1, #0
 80036e4:	0299      	lsls	r1, r3, #10
 80036e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036ea:	0290      	lsls	r0, r2, #10
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4610      	mov	r0, r2
 80036f2:	4619      	mov	r1, r3
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	461a      	mov	r2, r3
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	f7fd f8ee 	bl	80008dc <__aeabi_uldivmod>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4613      	mov	r3, r2
 8003706:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003708:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <HAL_RCC_GetSysClockFreq+0x358>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	0f1b      	lsrs	r3, r3, #28
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	fbb2 f3f3 	udiv	r3, r2, r3
 800371c:	61bb      	str	r3, [r7, #24]
      break;
 800371e:	e002      	b.n	8003726 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003720:	4b05      	ldr	r3, [pc, #20]	; (8003738 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003722:	61bb      	str	r3, [r7, #24]
      break;
 8003724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003726:	69bb      	ldr	r3, [r7, #24]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3720      	adds	r7, #32
 800372c:	46bd      	mov	sp, r7
 800372e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003732:	bf00      	nop
 8003734:	40023800 	.word	0x40023800
 8003738:	00f42400 	.word	0x00f42400
 800373c:	007a1200 	.word	0x007a1200

08003740 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e28d      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8083 	beq.w	8003866 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003760:	4b94      	ldr	r3, [pc, #592]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 030c 	and.w	r3, r3, #12
 8003768:	2b04      	cmp	r3, #4
 800376a:	d019      	beq.n	80037a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800376c:	4b91      	ldr	r3, [pc, #580]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003774:	2b08      	cmp	r3, #8
 8003776:	d106      	bne.n	8003786 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003778:	4b8e      	ldr	r3, [pc, #568]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003784:	d00c      	beq.n	80037a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003786:	4b8b      	ldr	r3, [pc, #556]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800378e:	2b0c      	cmp	r3, #12
 8003790:	d112      	bne.n	80037b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003792:	4b88      	ldr	r3, [pc, #544]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800379e:	d10b      	bne.n	80037b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a0:	4b84      	ldr	r3, [pc, #528]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d05b      	beq.n	8003864 <HAL_RCC_OscConfig+0x124>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d157      	bne.n	8003864 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e25a      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c0:	d106      	bne.n	80037d0 <HAL_RCC_OscConfig+0x90>
 80037c2:	4b7c      	ldr	r3, [pc, #496]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a7b      	ldr	r2, [pc, #492]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80037c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e01d      	b.n	800380c <HAL_RCC_OscConfig+0xcc>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037d8:	d10c      	bne.n	80037f4 <HAL_RCC_OscConfig+0xb4>
 80037da:	4b76      	ldr	r3, [pc, #472]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a75      	ldr	r2, [pc, #468]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80037e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	4b73      	ldr	r3, [pc, #460]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a72      	ldr	r2, [pc, #456]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e00b      	b.n	800380c <HAL_RCC_OscConfig+0xcc>
 80037f4:	4b6f      	ldr	r3, [pc, #444]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a6e      	ldr	r2, [pc, #440]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80037fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	4b6c      	ldr	r3, [pc, #432]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a6b      	ldr	r2, [pc, #428]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800380a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d013      	beq.n	800383c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fe f850 	bl	80018b8 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800381c:	f7fe f84c 	bl	80018b8 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	; 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e21f      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382e:	4b61      	ldr	r3, [pc, #388]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0xdc>
 800383a:	e014      	b.n	8003866 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fe f83c 	bl	80018b8 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003844:	f7fe f838 	bl	80018b8 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b64      	cmp	r3, #100	; 0x64
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e20b      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003856:	4b57      	ldr	r3, [pc, #348]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x104>
 8003862:	e000      	b.n	8003866 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d06f      	beq.n	8003952 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003872:	4b50      	ldr	r3, [pc, #320]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
 800387a:	2b00      	cmp	r3, #0
 800387c:	d017      	beq.n	80038ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800387e:	4b4d      	ldr	r3, [pc, #308]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003886:	2b08      	cmp	r3, #8
 8003888:	d105      	bne.n	8003896 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800388a:	4b4a      	ldr	r3, [pc, #296]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00b      	beq.n	80038ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003896:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800389e:	2b0c      	cmp	r3, #12
 80038a0:	d11c      	bne.n	80038dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038a2:	4b44      	ldr	r3, [pc, #272]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d116      	bne.n	80038dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ae:	4b41      	ldr	r3, [pc, #260]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <HAL_RCC_OscConfig+0x186>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d001      	beq.n	80038c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e1d3      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c6:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4937      	ldr	r1, [pc, #220]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038da:	e03a      	b.n	8003952 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d020      	beq.n	8003926 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038e4:	4b34      	ldr	r3, [pc, #208]	; (80039b8 <HAL_RCC_OscConfig+0x278>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ea:	f7fd ffe5 	bl	80018b8 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f2:	f7fd ffe1 	bl	80018b8 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e1b4      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003904:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003910:	4b28      	ldr	r3, [pc, #160]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4925      	ldr	r1, [pc, #148]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003920:	4313      	orrs	r3, r2
 8003922:	600b      	str	r3, [r1, #0]
 8003924:	e015      	b.n	8003952 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003926:	4b24      	ldr	r3, [pc, #144]	; (80039b8 <HAL_RCC_OscConfig+0x278>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7fd ffc4 	bl	80018b8 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003934:	f7fd ffc0 	bl	80018b8 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e193      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003946:	4b1b      	ldr	r3, [pc, #108]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d036      	beq.n	80039cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d016      	beq.n	8003994 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003966:	4b15      	ldr	r3, [pc, #84]	; (80039bc <HAL_RCC_OscConfig+0x27c>)
 8003968:	2201      	movs	r2, #1
 800396a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396c:	f7fd ffa4 	bl	80018b8 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003974:	f7fd ffa0 	bl	80018b8 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e173      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0x234>
 8003992:	e01b      	b.n	80039cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003994:	4b09      	ldr	r3, [pc, #36]	; (80039bc <HAL_RCC_OscConfig+0x27c>)
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399a:	f7fd ff8d 	bl	80018b8 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a0:	e00e      	b.n	80039c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a2:	f7fd ff89 	bl	80018b8 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d907      	bls.n	80039c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e15c      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
 80039b4:	40023800 	.word	0x40023800
 80039b8:	42470000 	.word	0x42470000
 80039bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c0:	4b8a      	ldr	r3, [pc, #552]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 80039c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1ea      	bne.n	80039a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 8097 	beq.w	8003b08 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039da:	2300      	movs	r3, #0
 80039dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039de:	4b83      	ldr	r3, [pc, #524]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10f      	bne.n	8003a0a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	4b7f      	ldr	r3, [pc, #508]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	4a7e      	ldr	r2, [pc, #504]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 80039f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f8:	6413      	str	r3, [r2, #64]	; 0x40
 80039fa:	4b7c      	ldr	r3, [pc, #496]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a06:	2301      	movs	r3, #1
 8003a08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0a:	4b79      	ldr	r3, [pc, #484]	; (8003bf0 <HAL_RCC_OscConfig+0x4b0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d118      	bne.n	8003a48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a16:	4b76      	ldr	r3, [pc, #472]	; (8003bf0 <HAL_RCC_OscConfig+0x4b0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a75      	ldr	r2, [pc, #468]	; (8003bf0 <HAL_RCC_OscConfig+0x4b0>)
 8003a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a22:	f7fd ff49 	bl	80018b8 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2a:	f7fd ff45 	bl	80018b8 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e118      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3c:	4b6c      	ldr	r3, [pc, #432]	; (8003bf0 <HAL_RCC_OscConfig+0x4b0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f0      	beq.n	8003a2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d106      	bne.n	8003a5e <HAL_RCC_OscConfig+0x31e>
 8003a50:	4b66      	ldr	r3, [pc, #408]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a54:	4a65      	ldr	r2, [pc, #404]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5c:	e01c      	b.n	8003a98 <HAL_RCC_OscConfig+0x358>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	d10c      	bne.n	8003a80 <HAL_RCC_OscConfig+0x340>
 8003a66:	4b61      	ldr	r3, [pc, #388]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6a:	4a60      	ldr	r2, [pc, #384]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003a6c:	f043 0304 	orr.w	r3, r3, #4
 8003a70:	6713      	str	r3, [r2, #112]	; 0x70
 8003a72:	4b5e      	ldr	r3, [pc, #376]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	4a5d      	ldr	r2, [pc, #372]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7e:	e00b      	b.n	8003a98 <HAL_RCC_OscConfig+0x358>
 8003a80:	4b5a      	ldr	r3, [pc, #360]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a84:	4a59      	ldr	r2, [pc, #356]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003a86:	f023 0301 	bic.w	r3, r3, #1
 8003a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8c:	4b57      	ldr	r3, [pc, #348]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a90:	4a56      	ldr	r2, [pc, #344]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003a92:	f023 0304 	bic.w	r3, r3, #4
 8003a96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d015      	beq.n	8003acc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa0:	f7fd ff0a 	bl	80018b8 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa6:	e00a      	b.n	8003abe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa8:	f7fd ff06 	bl	80018b8 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e0d7      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003abe:	4b4b      	ldr	r3, [pc, #300]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0ee      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x368>
 8003aca:	e014      	b.n	8003af6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003acc:	f7fd fef4 	bl	80018b8 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad2:	e00a      	b.n	8003aea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad4:	f7fd fef0 	bl	80018b8 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e0c1      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aea:	4b40      	ldr	r3, [pc, #256]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1ee      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003af6:	7dfb      	ldrb	r3, [r7, #23]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d105      	bne.n	8003b08 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003afc:	4b3b      	ldr	r3, [pc, #236]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	4a3a      	ldr	r2, [pc, #232]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80ad 	beq.w	8003c6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b12:	4b36      	ldr	r3, [pc, #216]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d060      	beq.n	8003be0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d145      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b26:	4b33      	ldr	r3, [pc, #204]	; (8003bf4 <HAL_RCC_OscConfig+0x4b4>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fd fec4 	bl	80018b8 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b34:	f7fd fec0 	bl	80018b8 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e093      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b46:	4b29      	ldr	r3, [pc, #164]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69da      	ldr	r2, [r3, #28]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	019b      	lsls	r3, r3, #6
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	085b      	lsrs	r3, r3, #1
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	041b      	lsls	r3, r3, #16
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	061b      	lsls	r3, r3, #24
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	071b      	lsls	r3, r3, #28
 8003b7e:	491b      	ldr	r1, [pc, #108]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b84:	4b1b      	ldr	r3, [pc, #108]	; (8003bf4 <HAL_RCC_OscConfig+0x4b4>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8a:	f7fd fe95 	bl	80018b8 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b92:	f7fd fe91 	bl	80018b8 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e064      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba4:	4b11      	ldr	r3, [pc, #68]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0f0      	beq.n	8003b92 <HAL_RCC_OscConfig+0x452>
 8003bb0:	e05c      	b.n	8003c6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb2:	4b10      	ldr	r3, [pc, #64]	; (8003bf4 <HAL_RCC_OscConfig+0x4b4>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb8:	f7fd fe7e 	bl	80018b8 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc0:	f7fd fe7a 	bl	80018b8 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e04d      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <HAL_RCC_OscConfig+0x4ac>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x480>
 8003bde:	e045      	b.n	8003c6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d107      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e040      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	40007000 	.word	0x40007000
 8003bf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bf8:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <HAL_RCC_OscConfig+0x538>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d030      	beq.n	8003c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d129      	bne.n	8003c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d122      	bne.n	8003c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c28:	4013      	ands	r3, r2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d119      	bne.n	8003c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	085b      	lsrs	r3, r3, #1
 8003c40:	3b01      	subs	r3, #1
 8003c42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d10f      	bne.n	8003c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d107      	bne.n	8003c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40023800 	.word	0x40023800

08003c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e041      	b.n	8003d12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7fd fb2c 	bl	8001300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f000 fba4 	bl	8004408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d001      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e04e      	b.n	8003dd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a23      	ldr	r2, [pc, #140]	; (8003de0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d022      	beq.n	8003d9c <HAL_TIM_Base_Start_IT+0x80>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5e:	d01d      	beq.n	8003d9c <HAL_TIM_Base_Start_IT+0x80>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1f      	ldr	r2, [pc, #124]	; (8003de4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d018      	beq.n	8003d9c <HAL_TIM_Base_Start_IT+0x80>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a1e      	ldr	r2, [pc, #120]	; (8003de8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d013      	beq.n	8003d9c <HAL_TIM_Base_Start_IT+0x80>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a1c      	ldr	r2, [pc, #112]	; (8003dec <HAL_TIM_Base_Start_IT+0xd0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00e      	beq.n	8003d9c <HAL_TIM_Base_Start_IT+0x80>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a1b      	ldr	r2, [pc, #108]	; (8003df0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d009      	beq.n	8003d9c <HAL_TIM_Base_Start_IT+0x80>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a19      	ldr	r2, [pc, #100]	; (8003df4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d004      	beq.n	8003d9c <HAL_TIM_Base_Start_IT+0x80>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a18      	ldr	r2, [pc, #96]	; (8003df8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d111      	bne.n	8003dc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b06      	cmp	r3, #6
 8003dac:	d010      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0201 	orr.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbe:	e007      	b.n	8003dd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40010000 	.word	0x40010000
 8003de4:	40000400 	.word	0x40000400
 8003de8:	40000800 	.word	0x40000800
 8003dec:	40000c00 	.word	0x40000c00
 8003df0:	40010400 	.word	0x40010400
 8003df4:	40014000 	.word	0x40014000
 8003df8:	40001800 	.word	0x40001800

08003dfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e041      	b.n	8003e92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fd fa4a 	bl	80012bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3304      	adds	r3, #4
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	f000 fae4 	bl	8004408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d109      	bne.n	8003ec0 <HAL_TIM_PWM_Start+0x24>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	bf14      	ite	ne
 8003eb8:	2301      	movne	r3, #1
 8003eba:	2300      	moveq	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	e022      	b.n	8003f06 <HAL_TIM_PWM_Start+0x6a>
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d109      	bne.n	8003eda <HAL_TIM_PWM_Start+0x3e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	bf14      	ite	ne
 8003ed2:	2301      	movne	r3, #1
 8003ed4:	2300      	moveq	r3, #0
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	e015      	b.n	8003f06 <HAL_TIM_PWM_Start+0x6a>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d109      	bne.n	8003ef4 <HAL_TIM_PWM_Start+0x58>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	bf14      	ite	ne
 8003eec:	2301      	movne	r3, #1
 8003eee:	2300      	moveq	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	e008      	b.n	8003f06 <HAL_TIM_PWM_Start+0x6a>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	bf14      	ite	ne
 8003f00:	2301      	movne	r3, #1
 8003f02:	2300      	moveq	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e07c      	b.n	8004008 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d104      	bne.n	8003f1e <HAL_TIM_PWM_Start+0x82>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f1c:	e013      	b.n	8003f46 <HAL_TIM_PWM_Start+0xaa>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d104      	bne.n	8003f2e <HAL_TIM_PWM_Start+0x92>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f2c:	e00b      	b.n	8003f46 <HAL_TIM_PWM_Start+0xaa>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d104      	bne.n	8003f3e <HAL_TIM_PWM_Start+0xa2>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f3c:	e003      	b.n	8003f46 <HAL_TIM_PWM_Start+0xaa>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2202      	movs	r2, #2
 8003f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	6839      	ldr	r1, [r7, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fcaa 	bl	80048a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a2d      	ldr	r2, [pc, #180]	; (8004010 <HAL_TIM_PWM_Start+0x174>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d004      	beq.n	8003f68 <HAL_TIM_PWM_Start+0xcc>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a2c      	ldr	r2, [pc, #176]	; (8004014 <HAL_TIM_PWM_Start+0x178>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d101      	bne.n	8003f6c <HAL_TIM_PWM_Start+0xd0>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <HAL_TIM_PWM_Start+0xd2>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d007      	beq.n	8003f82 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a22      	ldr	r2, [pc, #136]	; (8004010 <HAL_TIM_PWM_Start+0x174>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d022      	beq.n	8003fd2 <HAL_TIM_PWM_Start+0x136>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f94:	d01d      	beq.n	8003fd2 <HAL_TIM_PWM_Start+0x136>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a1f      	ldr	r2, [pc, #124]	; (8004018 <HAL_TIM_PWM_Start+0x17c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d018      	beq.n	8003fd2 <HAL_TIM_PWM_Start+0x136>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1d      	ldr	r2, [pc, #116]	; (800401c <HAL_TIM_PWM_Start+0x180>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d013      	beq.n	8003fd2 <HAL_TIM_PWM_Start+0x136>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <HAL_TIM_PWM_Start+0x184>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00e      	beq.n	8003fd2 <HAL_TIM_PWM_Start+0x136>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a16      	ldr	r2, [pc, #88]	; (8004014 <HAL_TIM_PWM_Start+0x178>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d009      	beq.n	8003fd2 <HAL_TIM_PWM_Start+0x136>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a18      	ldr	r2, [pc, #96]	; (8004024 <HAL_TIM_PWM_Start+0x188>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d004      	beq.n	8003fd2 <HAL_TIM_PWM_Start+0x136>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a16      	ldr	r2, [pc, #88]	; (8004028 <HAL_TIM_PWM_Start+0x18c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d111      	bne.n	8003ff6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b06      	cmp	r3, #6
 8003fe2:	d010      	beq.n	8004006 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff4:	e007      	b.n	8004006 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0201 	orr.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40010000 	.word	0x40010000
 8004014:	40010400 	.word	0x40010400
 8004018:	40000400 	.word	0x40000400
 800401c:	40000800 	.word	0x40000800
 8004020:	40000c00 	.word	0x40000c00
 8004024:	40014000 	.word	0x40014000
 8004028:	40001800 	.word	0x40001800

0800402c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b02      	cmp	r3, #2
 8004040:	d122      	bne.n	8004088 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b02      	cmp	r3, #2
 800404e:	d11b      	bne.n	8004088 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f06f 0202 	mvn.w	r2, #2
 8004058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f9ac 	bl	80043cc <HAL_TIM_IC_CaptureCallback>
 8004074:	e005      	b.n	8004082 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f99e 	bl	80043b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f9af 	bl	80043e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b04      	cmp	r3, #4
 8004094:	d122      	bne.n	80040dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d11b      	bne.n	80040dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0204 	mvn.w	r2, #4
 80040ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2202      	movs	r2, #2
 80040b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f982 	bl	80043cc <HAL_TIM_IC_CaptureCallback>
 80040c8:	e005      	b.n	80040d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f974 	bl	80043b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f985 	bl	80043e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d122      	bne.n	8004130 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	d11b      	bne.n	8004130 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0208 	mvn.w	r2, #8
 8004100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2204      	movs	r2, #4
 8004106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f958 	bl	80043cc <HAL_TIM_IC_CaptureCallback>
 800411c:	e005      	b.n	800412a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f94a 	bl	80043b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f95b 	bl	80043e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0310 	and.w	r3, r3, #16
 800413a:	2b10      	cmp	r3, #16
 800413c:	d122      	bne.n	8004184 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	2b10      	cmp	r3, #16
 800414a:	d11b      	bne.n	8004184 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0210 	mvn.w	r2, #16
 8004154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2208      	movs	r2, #8
 800415a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f92e 	bl	80043cc <HAL_TIM_IC_CaptureCallback>
 8004170:	e005      	b.n	800417e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f920 	bl	80043b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f931 	bl	80043e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b01      	cmp	r3, #1
 8004190:	d10e      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b01      	cmp	r3, #1
 800419e:	d107      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0201 	mvn.w	r2, #1
 80041a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fc ffaa 	bl	8001104 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ba:	2b80      	cmp	r3, #128	; 0x80
 80041bc:	d10e      	bne.n	80041dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c8:	2b80      	cmp	r3, #128	; 0x80
 80041ca:	d107      	bne.n	80041dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fc64 	bl	8004aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e6:	2b40      	cmp	r3, #64	; 0x40
 80041e8:	d10e      	bne.n	8004208 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f4:	2b40      	cmp	r3, #64	; 0x40
 80041f6:	d107      	bne.n	8004208 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f8f6 	bl	80043f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b20      	cmp	r3, #32
 8004214:	d10e      	bne.n	8004234 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f003 0320 	and.w	r3, r3, #32
 8004220:	2b20      	cmp	r3, #32
 8004222:	d107      	bne.n	8004234 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f06f 0220 	mvn.w	r2, #32
 800422c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fc2e 	bl	8004a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004234:	bf00      	nop
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004252:	2302      	movs	r3, #2
 8004254:	e0ac      	b.n	80043b0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b0c      	cmp	r3, #12
 8004262:	f200 809f 	bhi.w	80043a4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004266:	a201      	add	r2, pc, #4	; (adr r2, 800426c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426c:	080042a1 	.word	0x080042a1
 8004270:	080043a5 	.word	0x080043a5
 8004274:	080043a5 	.word	0x080043a5
 8004278:	080043a5 	.word	0x080043a5
 800427c:	080042e1 	.word	0x080042e1
 8004280:	080043a5 	.word	0x080043a5
 8004284:	080043a5 	.word	0x080043a5
 8004288:	080043a5 	.word	0x080043a5
 800428c:	08004323 	.word	0x08004323
 8004290:	080043a5 	.word	0x080043a5
 8004294:	080043a5 	.word	0x080043a5
 8004298:	080043a5 	.word	0x080043a5
 800429c:	08004363 	.word	0x08004363
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68b9      	ldr	r1, [r7, #8]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 f94e 	bl	8004548 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699a      	ldr	r2, [r3, #24]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0208 	orr.w	r2, r2, #8
 80042ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699a      	ldr	r2, [r3, #24]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0204 	bic.w	r2, r2, #4
 80042ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6999      	ldr	r1, [r3, #24]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	691a      	ldr	r2, [r3, #16]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	619a      	str	r2, [r3, #24]
      break;
 80042de:	e062      	b.n	80043a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68b9      	ldr	r1, [r7, #8]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 f99e 	bl	8004628 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699a      	ldr	r2, [r3, #24]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800430a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6999      	ldr	r1, [r3, #24]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	021a      	lsls	r2, r3, #8
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	619a      	str	r2, [r3, #24]
      break;
 8004320:	e041      	b.n	80043a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68b9      	ldr	r1, [r7, #8]
 8004328:	4618      	mov	r0, r3
 800432a:	f000 f9f3 	bl	8004714 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69da      	ldr	r2, [r3, #28]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0208 	orr.w	r2, r2, #8
 800433c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69da      	ldr	r2, [r3, #28]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0204 	bic.w	r2, r2, #4
 800434c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	69d9      	ldr	r1, [r3, #28]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	61da      	str	r2, [r3, #28]
      break;
 8004360:	e021      	b.n	80043a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fa47 	bl	80047fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69da      	ldr	r2, [r3, #28]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800437c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69da      	ldr	r2, [r3, #28]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	69d9      	ldr	r1, [r3, #28]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	021a      	lsls	r2, r3, #8
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	61da      	str	r2, [r3, #28]
      break;
 80043a2:	e000      	b.n	80043a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80043a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a40      	ldr	r2, [pc, #256]	; (800451c <TIM_Base_SetConfig+0x114>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d013      	beq.n	8004448 <TIM_Base_SetConfig+0x40>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004426:	d00f      	beq.n	8004448 <TIM_Base_SetConfig+0x40>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a3d      	ldr	r2, [pc, #244]	; (8004520 <TIM_Base_SetConfig+0x118>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00b      	beq.n	8004448 <TIM_Base_SetConfig+0x40>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a3c      	ldr	r2, [pc, #240]	; (8004524 <TIM_Base_SetConfig+0x11c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d007      	beq.n	8004448 <TIM_Base_SetConfig+0x40>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a3b      	ldr	r2, [pc, #236]	; (8004528 <TIM_Base_SetConfig+0x120>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d003      	beq.n	8004448 <TIM_Base_SetConfig+0x40>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a3a      	ldr	r2, [pc, #232]	; (800452c <TIM_Base_SetConfig+0x124>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d108      	bne.n	800445a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a2f      	ldr	r2, [pc, #188]	; (800451c <TIM_Base_SetConfig+0x114>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d02b      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004468:	d027      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a2c      	ldr	r2, [pc, #176]	; (8004520 <TIM_Base_SetConfig+0x118>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d023      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a2b      	ldr	r2, [pc, #172]	; (8004524 <TIM_Base_SetConfig+0x11c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d01f      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a2a      	ldr	r2, [pc, #168]	; (8004528 <TIM_Base_SetConfig+0x120>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d01b      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a29      	ldr	r2, [pc, #164]	; (800452c <TIM_Base_SetConfig+0x124>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d017      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a28      	ldr	r2, [pc, #160]	; (8004530 <TIM_Base_SetConfig+0x128>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d013      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a27      	ldr	r2, [pc, #156]	; (8004534 <TIM_Base_SetConfig+0x12c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00f      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a26      	ldr	r2, [pc, #152]	; (8004538 <TIM_Base_SetConfig+0x130>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00b      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a25      	ldr	r2, [pc, #148]	; (800453c <TIM_Base_SetConfig+0x134>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d007      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a24      	ldr	r2, [pc, #144]	; (8004540 <TIM_Base_SetConfig+0x138>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d003      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a23      	ldr	r2, [pc, #140]	; (8004544 <TIM_Base_SetConfig+0x13c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d108      	bne.n	80044cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a0a      	ldr	r2, [pc, #40]	; (800451c <TIM_Base_SetConfig+0x114>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d003      	beq.n	8004500 <TIM_Base_SetConfig+0xf8>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a0c      	ldr	r2, [pc, #48]	; (800452c <TIM_Base_SetConfig+0x124>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d103      	bne.n	8004508 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	615a      	str	r2, [r3, #20]
}
 800450e:	bf00      	nop
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	40010000 	.word	0x40010000
 8004520:	40000400 	.word	0x40000400
 8004524:	40000800 	.word	0x40000800
 8004528:	40000c00 	.word	0x40000c00
 800452c:	40010400 	.word	0x40010400
 8004530:	40014000 	.word	0x40014000
 8004534:	40014400 	.word	0x40014400
 8004538:	40014800 	.word	0x40014800
 800453c:	40001800 	.word	0x40001800
 8004540:	40001c00 	.word	0x40001c00
 8004544:	40002000 	.word	0x40002000

08004548 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	f023 0201 	bic.w	r2, r3, #1
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0303 	bic.w	r3, r3, #3
 800457e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f023 0302 	bic.w	r3, r3, #2
 8004590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a20      	ldr	r2, [pc, #128]	; (8004620 <TIM_OC1_SetConfig+0xd8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d003      	beq.n	80045ac <TIM_OC1_SetConfig+0x64>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a1f      	ldr	r2, [pc, #124]	; (8004624 <TIM_OC1_SetConfig+0xdc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d10c      	bne.n	80045c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f023 0308 	bic.w	r3, r3, #8
 80045b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f023 0304 	bic.w	r3, r3, #4
 80045c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a15      	ldr	r2, [pc, #84]	; (8004620 <TIM_OC1_SetConfig+0xd8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d003      	beq.n	80045d6 <TIM_OC1_SetConfig+0x8e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a14      	ldr	r2, [pc, #80]	; (8004624 <TIM_OC1_SetConfig+0xdc>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d111      	bne.n	80045fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	621a      	str	r2, [r3, #32]
}
 8004614:	bf00      	nop
 8004616:	371c      	adds	r7, #28
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	40010000 	.word	0x40010000
 8004624:	40010400 	.word	0x40010400

08004628 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	f023 0210 	bic.w	r2, r3, #16
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	021b      	lsls	r3, r3, #8
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4313      	orrs	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f023 0320 	bic.w	r3, r3, #32
 8004672:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a22      	ldr	r2, [pc, #136]	; (800470c <TIM_OC2_SetConfig+0xe4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d003      	beq.n	8004690 <TIM_OC2_SetConfig+0x68>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a21      	ldr	r2, [pc, #132]	; (8004710 <TIM_OC2_SetConfig+0xe8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d10d      	bne.n	80046ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a17      	ldr	r2, [pc, #92]	; (800470c <TIM_OC2_SetConfig+0xe4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d003      	beq.n	80046bc <TIM_OC2_SetConfig+0x94>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a16      	ldr	r2, [pc, #88]	; (8004710 <TIM_OC2_SetConfig+0xe8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d113      	bne.n	80046e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	621a      	str	r2, [r3, #32]
}
 80046fe:	bf00      	nop
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40010000 	.word	0x40010000
 8004710:	40010400 	.word	0x40010400

08004714 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0303 	bic.w	r3, r3, #3
 800474a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800475c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a21      	ldr	r2, [pc, #132]	; (80047f4 <TIM_OC3_SetConfig+0xe0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d003      	beq.n	800477a <TIM_OC3_SetConfig+0x66>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a20      	ldr	r2, [pc, #128]	; (80047f8 <TIM_OC3_SetConfig+0xe4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d10d      	bne.n	8004796 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004780:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	021b      	lsls	r3, r3, #8
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a16      	ldr	r2, [pc, #88]	; (80047f4 <TIM_OC3_SetConfig+0xe0>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d003      	beq.n	80047a6 <TIM_OC3_SetConfig+0x92>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a15      	ldr	r2, [pc, #84]	; (80047f8 <TIM_OC3_SetConfig+0xe4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d113      	bne.n	80047ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	621a      	str	r2, [r3, #32]
}
 80047e8:	bf00      	nop
 80047ea:	371c      	adds	r7, #28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	40010000 	.word	0x40010000
 80047f8:	40010400 	.word	0x40010400

080047fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800482a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	021b      	lsls	r3, r3, #8
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004846:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	031b      	lsls	r3, r3, #12
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a12      	ldr	r2, [pc, #72]	; (80048a0 <TIM_OC4_SetConfig+0xa4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d003      	beq.n	8004864 <TIM_OC4_SetConfig+0x68>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a11      	ldr	r2, [pc, #68]	; (80048a4 <TIM_OC4_SetConfig+0xa8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d109      	bne.n	8004878 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800486a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	019b      	lsls	r3, r3, #6
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	621a      	str	r2, [r3, #32]
}
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40010000 	.word	0x40010000
 80048a4:	40010400 	.word	0x40010400

080048a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 031f 	and.w	r3, r3, #31
 80048ba:	2201      	movs	r2, #1
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a1a      	ldr	r2, [r3, #32]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	43db      	mvns	r3, r3
 80048ca:	401a      	ands	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a1a      	ldr	r2, [r3, #32]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f003 031f 	and.w	r3, r3, #31
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	fa01 f303 	lsl.w	r3, r1, r3
 80048e0:	431a      	orrs	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	621a      	str	r2, [r3, #32]
}
 80048e6:	bf00      	nop
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004908:	2302      	movs	r3, #2
 800490a:	e05a      	b.n	80049c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a21      	ldr	r2, [pc, #132]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d022      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004958:	d01d      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a1d      	ldr	r2, [pc, #116]	; (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d018      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1b      	ldr	r2, [pc, #108]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d013      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1a      	ldr	r2, [pc, #104]	; (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00e      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a18      	ldr	r2, [pc, #96]	; (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d009      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a17      	ldr	r2, [pc, #92]	; (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d004      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a15      	ldr	r2, [pc, #84]	; (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d10c      	bne.n	80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800499c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40010000 	.word	0x40010000
 80049d4:	40000400 	.word	0x40000400
 80049d8:	40000800 	.word	0x40000800
 80049dc:	40000c00 	.word	0x40000c00
 80049e0:	40010400 	.word	0x40010400
 80049e4:	40014000 	.word	0x40014000
 80049e8:	40001800 	.word	0x40001800

080049ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e03d      	b.n	8004a84 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e03f      	b.n	8004b4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fc fc70 	bl	80013c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2224      	movs	r2, #36	; 0x24
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004afa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f905 	bl	8004d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695a      	ldr	r2, [r3, #20]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b08a      	sub	sp, #40	; 0x28
 8004b56:	af02      	add	r7, sp, #8
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	603b      	str	r3, [r7, #0]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b20      	cmp	r3, #32
 8004b70:	d17c      	bne.n	8004c6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <HAL_UART_Transmit+0x2c>
 8004b78:	88fb      	ldrh	r3, [r7, #6]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e075      	b.n	8004c6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_UART_Transmit+0x3e>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e06e      	b.n	8004c6e <HAL_UART_Transmit+0x11c>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2221      	movs	r2, #33	; 0x21
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ba6:	f7fc fe87 	bl	80018b8 <HAL_GetTick>
 8004baa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	88fa      	ldrh	r2, [r7, #6]
 8004bb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	88fa      	ldrh	r2, [r7, #6]
 8004bb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc0:	d108      	bne.n	8004bd4 <HAL_UART_Transmit+0x82>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d104      	bne.n	8004bd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	e003      	b.n	8004bdc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004be4:	e02a      	b.n	8004c3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2200      	movs	r2, #0
 8004bee:	2180      	movs	r1, #128	; 0x80
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f840 	bl	8004c76 <UART_WaitOnFlagUntilTimeout>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e036      	b.n	8004c6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10b      	bne.n	8004c1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	3302      	adds	r3, #2
 8004c1a:	61bb      	str	r3, [r7, #24]
 8004c1c:	e007      	b.n	8004c2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	781a      	ldrb	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1cf      	bne.n	8004be6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	2140      	movs	r1, #64	; 0x40
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 f810 	bl	8004c76 <UART_WaitOnFlagUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e006      	b.n	8004c6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	e000      	b.n	8004c6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c6c:	2302      	movs	r3, #2
  }
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3720      	adds	r7, #32
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	603b      	str	r3, [r7, #0]
 8004c82:	4613      	mov	r3, r2
 8004c84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c86:	e02c      	b.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8e:	d028      	beq.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d007      	beq.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c96:	f7fc fe0f 	bl	80018b8 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d21d      	bcs.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cb4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695a      	ldr	r2, [r3, #20]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 0201 	bic.w	r2, r2, #1
 8004cc4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e00f      	b.n	8004d02 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4013      	ands	r3, r2
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	bf0c      	ite	eq
 8004cf2:	2301      	moveq	r3, #1
 8004cf4:	2300      	movne	r3, #0
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	79fb      	ldrb	r3, [r7, #7]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d0c3      	beq.n	8004c88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d10:	b09f      	sub	sp, #124	; 0x7c
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d22:	68d9      	ldr	r1, [r3, #12]
 8004d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	ea40 0301 	orr.w	r3, r0, r1
 8004d2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	431a      	orrs	r2, r3
 8004d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d50:	f021 010c 	bic.w	r1, r1, #12
 8004d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6a:	6999      	ldr	r1, [r3, #24]
 8004d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	ea40 0301 	orr.w	r3, r0, r1
 8004d74:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	4bc5      	ldr	r3, [pc, #788]	; (8005090 <UART_SetConfig+0x384>)
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d004      	beq.n	8004d8a <UART_SetConfig+0x7e>
 8004d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	4bc3      	ldr	r3, [pc, #780]	; (8005094 <UART_SetConfig+0x388>)
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d103      	bne.n	8004d92 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d8a:	f7fe fb13 	bl	80033b4 <HAL_RCC_GetPCLK2Freq>
 8004d8e:	6778      	str	r0, [r7, #116]	; 0x74
 8004d90:	e002      	b.n	8004d98 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d92:	f7fe fafb 	bl	800338c <HAL_RCC_GetPCLK1Freq>
 8004d96:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da0:	f040 80b6 	bne.w	8004f10 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004da4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004da6:	461c      	mov	r4, r3
 8004da8:	f04f 0500 	mov.w	r5, #0
 8004dac:	4622      	mov	r2, r4
 8004dae:	462b      	mov	r3, r5
 8004db0:	1891      	adds	r1, r2, r2
 8004db2:	6439      	str	r1, [r7, #64]	; 0x40
 8004db4:	415b      	adcs	r3, r3
 8004db6:	647b      	str	r3, [r7, #68]	; 0x44
 8004db8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004dbc:	1912      	adds	r2, r2, r4
 8004dbe:	eb45 0303 	adc.w	r3, r5, r3
 8004dc2:	f04f 0000 	mov.w	r0, #0
 8004dc6:	f04f 0100 	mov.w	r1, #0
 8004dca:	00d9      	lsls	r1, r3, #3
 8004dcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dd0:	00d0      	lsls	r0, r2, #3
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	1911      	adds	r1, r2, r4
 8004dd8:	6639      	str	r1, [r7, #96]	; 0x60
 8004dda:	416b      	adcs	r3, r5
 8004ddc:	667b      	str	r3, [r7, #100]	; 0x64
 8004dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	461a      	mov	r2, r3
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	1891      	adds	r1, r2, r2
 8004dea:	63b9      	str	r1, [r7, #56]	; 0x38
 8004dec:	415b      	adcs	r3, r3
 8004dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004df0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004df4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004df8:	f7fb fd70 	bl	80008dc <__aeabi_uldivmod>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4ba5      	ldr	r3, [pc, #660]	; (8005098 <UART_SetConfig+0x38c>)
 8004e02:	fba3 2302 	umull	r2, r3, r3, r2
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	011e      	lsls	r6, r3, #4
 8004e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e0c:	461c      	mov	r4, r3
 8004e0e:	f04f 0500 	mov.w	r5, #0
 8004e12:	4622      	mov	r2, r4
 8004e14:	462b      	mov	r3, r5
 8004e16:	1891      	adds	r1, r2, r2
 8004e18:	6339      	str	r1, [r7, #48]	; 0x30
 8004e1a:	415b      	adcs	r3, r3
 8004e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004e22:	1912      	adds	r2, r2, r4
 8004e24:	eb45 0303 	adc.w	r3, r5, r3
 8004e28:	f04f 0000 	mov.w	r0, #0
 8004e2c:	f04f 0100 	mov.w	r1, #0
 8004e30:	00d9      	lsls	r1, r3, #3
 8004e32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e36:	00d0      	lsls	r0, r2, #3
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	1911      	adds	r1, r2, r4
 8004e3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e40:	416b      	adcs	r3, r5
 8004e42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	1891      	adds	r1, r2, r2
 8004e50:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e52:	415b      	adcs	r3, r3
 8004e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004e5e:	f7fb fd3d 	bl	80008dc <__aeabi_uldivmod>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4b8c      	ldr	r3, [pc, #560]	; (8005098 <UART_SetConfig+0x38c>)
 8004e68:	fba3 1302 	umull	r1, r3, r3, r2
 8004e6c:	095b      	lsrs	r3, r3, #5
 8004e6e:	2164      	movs	r1, #100	; 0x64
 8004e70:	fb01 f303 	mul.w	r3, r1, r3
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	3332      	adds	r3, #50	; 0x32
 8004e7a:	4a87      	ldr	r2, [pc, #540]	; (8005098 <UART_SetConfig+0x38c>)
 8004e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e80:	095b      	lsrs	r3, r3, #5
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e88:	441e      	add	r6, r3
 8004e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f04f 0100 	mov.w	r1, #0
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	1894      	adds	r4, r2, r2
 8004e98:	623c      	str	r4, [r7, #32]
 8004e9a:	415b      	adcs	r3, r3
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ea2:	1812      	adds	r2, r2, r0
 8004ea4:	eb41 0303 	adc.w	r3, r1, r3
 8004ea8:	f04f 0400 	mov.w	r4, #0
 8004eac:	f04f 0500 	mov.w	r5, #0
 8004eb0:	00dd      	lsls	r5, r3, #3
 8004eb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004eb6:	00d4      	lsls	r4, r2, #3
 8004eb8:	4622      	mov	r2, r4
 8004eba:	462b      	mov	r3, r5
 8004ebc:	1814      	adds	r4, r2, r0
 8004ebe:	653c      	str	r4, [r7, #80]	; 0x50
 8004ec0:	414b      	adcs	r3, r1
 8004ec2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	1891      	adds	r1, r2, r2
 8004ed0:	61b9      	str	r1, [r7, #24]
 8004ed2:	415b      	adcs	r3, r3
 8004ed4:	61fb      	str	r3, [r7, #28]
 8004ed6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eda:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004ede:	f7fb fcfd 	bl	80008dc <__aeabi_uldivmod>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	4b6c      	ldr	r3, [pc, #432]	; (8005098 <UART_SetConfig+0x38c>)
 8004ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	2164      	movs	r1, #100	; 0x64
 8004ef0:	fb01 f303 	mul.w	r3, r1, r3
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	3332      	adds	r3, #50	; 0x32
 8004efa:	4a67      	ldr	r2, [pc, #412]	; (8005098 <UART_SetConfig+0x38c>)
 8004efc:	fba2 2303 	umull	r2, r3, r2, r3
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	f003 0207 	and.w	r2, r3, #7
 8004f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4432      	add	r2, r6
 8004f0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f0e:	e0b9      	b.n	8005084 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f12:	461c      	mov	r4, r3
 8004f14:	f04f 0500 	mov.w	r5, #0
 8004f18:	4622      	mov	r2, r4
 8004f1a:	462b      	mov	r3, r5
 8004f1c:	1891      	adds	r1, r2, r2
 8004f1e:	6139      	str	r1, [r7, #16]
 8004f20:	415b      	adcs	r3, r3
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f28:	1912      	adds	r2, r2, r4
 8004f2a:	eb45 0303 	adc.w	r3, r5, r3
 8004f2e:	f04f 0000 	mov.w	r0, #0
 8004f32:	f04f 0100 	mov.w	r1, #0
 8004f36:	00d9      	lsls	r1, r3, #3
 8004f38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f3c:	00d0      	lsls	r0, r2, #3
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	eb12 0804 	adds.w	r8, r2, r4
 8004f46:	eb43 0905 	adc.w	r9, r3, r5
 8004f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f04f 0100 	mov.w	r1, #0
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	008b      	lsls	r3, r1, #2
 8004f5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f62:	0082      	lsls	r2, r0, #2
 8004f64:	4640      	mov	r0, r8
 8004f66:	4649      	mov	r1, r9
 8004f68:	f7fb fcb8 	bl	80008dc <__aeabi_uldivmod>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4b49      	ldr	r3, [pc, #292]	; (8005098 <UART_SetConfig+0x38c>)
 8004f72:	fba3 2302 	umull	r2, r3, r3, r2
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	011e      	lsls	r6, r3, #4
 8004f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f04f 0100 	mov.w	r1, #0
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	1894      	adds	r4, r2, r2
 8004f88:	60bc      	str	r4, [r7, #8]
 8004f8a:	415b      	adcs	r3, r3
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f92:	1812      	adds	r2, r2, r0
 8004f94:	eb41 0303 	adc.w	r3, r1, r3
 8004f98:	f04f 0400 	mov.w	r4, #0
 8004f9c:	f04f 0500 	mov.w	r5, #0
 8004fa0:	00dd      	lsls	r5, r3, #3
 8004fa2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004fa6:	00d4      	lsls	r4, r2, #3
 8004fa8:	4622      	mov	r2, r4
 8004faa:	462b      	mov	r3, r5
 8004fac:	1814      	adds	r4, r2, r0
 8004fae:	64bc      	str	r4, [r7, #72]	; 0x48
 8004fb0:	414b      	adcs	r3, r1
 8004fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f04f 0100 	mov.w	r1, #0
 8004fbe:	f04f 0200 	mov.w	r2, #0
 8004fc2:	f04f 0300 	mov.w	r3, #0
 8004fc6:	008b      	lsls	r3, r1, #2
 8004fc8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fcc:	0082      	lsls	r2, r0, #2
 8004fce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004fd2:	f7fb fc83 	bl	80008dc <__aeabi_uldivmod>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4b2f      	ldr	r3, [pc, #188]	; (8005098 <UART_SetConfig+0x38c>)
 8004fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe0:	095b      	lsrs	r3, r3, #5
 8004fe2:	2164      	movs	r1, #100	; 0x64
 8004fe4:	fb01 f303 	mul.w	r3, r1, r3
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	3332      	adds	r3, #50	; 0x32
 8004fee:	4a2a      	ldr	r2, [pc, #168]	; (8005098 <UART_SetConfig+0x38c>)
 8004ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff4:	095b      	lsrs	r3, r3, #5
 8004ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ffa:	441e      	add	r6, r3
 8004ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ffe:	4618      	mov	r0, r3
 8005000:	f04f 0100 	mov.w	r1, #0
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	1894      	adds	r4, r2, r2
 800500a:	603c      	str	r4, [r7, #0]
 800500c:	415b      	adcs	r3, r3
 800500e:	607b      	str	r3, [r7, #4]
 8005010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005014:	1812      	adds	r2, r2, r0
 8005016:	eb41 0303 	adc.w	r3, r1, r3
 800501a:	f04f 0400 	mov.w	r4, #0
 800501e:	f04f 0500 	mov.w	r5, #0
 8005022:	00dd      	lsls	r5, r3, #3
 8005024:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005028:	00d4      	lsls	r4, r2, #3
 800502a:	4622      	mov	r2, r4
 800502c:	462b      	mov	r3, r5
 800502e:	eb12 0a00 	adds.w	sl, r2, r0
 8005032:	eb43 0b01 	adc.w	fp, r3, r1
 8005036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	4618      	mov	r0, r3
 800503c:	f04f 0100 	mov.w	r1, #0
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	f04f 0300 	mov.w	r3, #0
 8005048:	008b      	lsls	r3, r1, #2
 800504a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800504e:	0082      	lsls	r2, r0, #2
 8005050:	4650      	mov	r0, sl
 8005052:	4659      	mov	r1, fp
 8005054:	f7fb fc42 	bl	80008dc <__aeabi_uldivmod>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4b0e      	ldr	r3, [pc, #56]	; (8005098 <UART_SetConfig+0x38c>)
 800505e:	fba3 1302 	umull	r1, r3, r3, r2
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	2164      	movs	r1, #100	; 0x64
 8005066:	fb01 f303 	mul.w	r3, r1, r3
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	3332      	adds	r3, #50	; 0x32
 8005070:	4a09      	ldr	r2, [pc, #36]	; (8005098 <UART_SetConfig+0x38c>)
 8005072:	fba2 2303 	umull	r2, r3, r2, r3
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	f003 020f 	and.w	r2, r3, #15
 800507c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4432      	add	r2, r6
 8005082:	609a      	str	r2, [r3, #8]
}
 8005084:	bf00      	nop
 8005086:	377c      	adds	r7, #124	; 0x7c
 8005088:	46bd      	mov	sp, r7
 800508a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800508e:	bf00      	nop
 8005090:	40011000 	.word	0x40011000
 8005094:	40011400 	.word	0x40011400
 8005098:	51eb851f 	.word	0x51eb851f

0800509c <__errno>:
 800509c:	4b01      	ldr	r3, [pc, #4]	; (80050a4 <__errno+0x8>)
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	20000010 	.word	0x20000010

080050a8 <__libc_init_array>:
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	4d0d      	ldr	r5, [pc, #52]	; (80050e0 <__libc_init_array+0x38>)
 80050ac:	4c0d      	ldr	r4, [pc, #52]	; (80050e4 <__libc_init_array+0x3c>)
 80050ae:	1b64      	subs	r4, r4, r5
 80050b0:	10a4      	asrs	r4, r4, #2
 80050b2:	2600      	movs	r6, #0
 80050b4:	42a6      	cmp	r6, r4
 80050b6:	d109      	bne.n	80050cc <__libc_init_array+0x24>
 80050b8:	4d0b      	ldr	r5, [pc, #44]	; (80050e8 <__libc_init_array+0x40>)
 80050ba:	4c0c      	ldr	r4, [pc, #48]	; (80050ec <__libc_init_array+0x44>)
 80050bc:	f000 fc4e 	bl	800595c <_init>
 80050c0:	1b64      	subs	r4, r4, r5
 80050c2:	10a4      	asrs	r4, r4, #2
 80050c4:	2600      	movs	r6, #0
 80050c6:	42a6      	cmp	r6, r4
 80050c8:	d105      	bne.n	80050d6 <__libc_init_array+0x2e>
 80050ca:	bd70      	pop	{r4, r5, r6, pc}
 80050cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80050d0:	4798      	blx	r3
 80050d2:	3601      	adds	r6, #1
 80050d4:	e7ee      	b.n	80050b4 <__libc_init_array+0xc>
 80050d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050da:	4798      	blx	r3
 80050dc:	3601      	adds	r6, #1
 80050de:	e7f2      	b.n	80050c6 <__libc_init_array+0x1e>
 80050e0:	08005bdc 	.word	0x08005bdc
 80050e4:	08005bdc 	.word	0x08005bdc
 80050e8:	08005bdc 	.word	0x08005bdc
 80050ec:	08005be0 	.word	0x08005be0

080050f0 <memcpy>:
 80050f0:	440a      	add	r2, r1
 80050f2:	4291      	cmp	r1, r2
 80050f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80050f8:	d100      	bne.n	80050fc <memcpy+0xc>
 80050fa:	4770      	bx	lr
 80050fc:	b510      	push	{r4, lr}
 80050fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005102:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005106:	4291      	cmp	r1, r2
 8005108:	d1f9      	bne.n	80050fe <memcpy+0xe>
 800510a:	bd10      	pop	{r4, pc}

0800510c <memset>:
 800510c:	4402      	add	r2, r0
 800510e:	4603      	mov	r3, r0
 8005110:	4293      	cmp	r3, r2
 8005112:	d100      	bne.n	8005116 <memset+0xa>
 8005114:	4770      	bx	lr
 8005116:	f803 1b01 	strb.w	r1, [r3], #1
 800511a:	e7f9      	b.n	8005110 <memset+0x4>

0800511c <siprintf>:
 800511c:	b40e      	push	{r1, r2, r3}
 800511e:	b500      	push	{lr}
 8005120:	b09c      	sub	sp, #112	; 0x70
 8005122:	ab1d      	add	r3, sp, #116	; 0x74
 8005124:	9002      	str	r0, [sp, #8]
 8005126:	9006      	str	r0, [sp, #24]
 8005128:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800512c:	4809      	ldr	r0, [pc, #36]	; (8005154 <siprintf+0x38>)
 800512e:	9107      	str	r1, [sp, #28]
 8005130:	9104      	str	r1, [sp, #16]
 8005132:	4909      	ldr	r1, [pc, #36]	; (8005158 <siprintf+0x3c>)
 8005134:	f853 2b04 	ldr.w	r2, [r3], #4
 8005138:	9105      	str	r1, [sp, #20]
 800513a:	6800      	ldr	r0, [r0, #0]
 800513c:	9301      	str	r3, [sp, #4]
 800513e:	a902      	add	r1, sp, #8
 8005140:	f000 f868 	bl	8005214 <_svfiprintf_r>
 8005144:	9b02      	ldr	r3, [sp, #8]
 8005146:	2200      	movs	r2, #0
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	b01c      	add	sp, #112	; 0x70
 800514c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005150:	b003      	add	sp, #12
 8005152:	4770      	bx	lr
 8005154:	20000010 	.word	0x20000010
 8005158:	ffff0208 	.word	0xffff0208

0800515c <__ssputs_r>:
 800515c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005160:	688e      	ldr	r6, [r1, #8]
 8005162:	429e      	cmp	r6, r3
 8005164:	4682      	mov	sl, r0
 8005166:	460c      	mov	r4, r1
 8005168:	4690      	mov	r8, r2
 800516a:	461f      	mov	r7, r3
 800516c:	d838      	bhi.n	80051e0 <__ssputs_r+0x84>
 800516e:	898a      	ldrh	r2, [r1, #12]
 8005170:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005174:	d032      	beq.n	80051dc <__ssputs_r+0x80>
 8005176:	6825      	ldr	r5, [r4, #0]
 8005178:	6909      	ldr	r1, [r1, #16]
 800517a:	eba5 0901 	sub.w	r9, r5, r1
 800517e:	6965      	ldr	r5, [r4, #20]
 8005180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005188:	3301      	adds	r3, #1
 800518a:	444b      	add	r3, r9
 800518c:	106d      	asrs	r5, r5, #1
 800518e:	429d      	cmp	r5, r3
 8005190:	bf38      	it	cc
 8005192:	461d      	movcc	r5, r3
 8005194:	0553      	lsls	r3, r2, #21
 8005196:	d531      	bpl.n	80051fc <__ssputs_r+0xa0>
 8005198:	4629      	mov	r1, r5
 800519a:	f000 fb39 	bl	8005810 <_malloc_r>
 800519e:	4606      	mov	r6, r0
 80051a0:	b950      	cbnz	r0, 80051b8 <__ssputs_r+0x5c>
 80051a2:	230c      	movs	r3, #12
 80051a4:	f8ca 3000 	str.w	r3, [sl]
 80051a8:	89a3      	ldrh	r3, [r4, #12]
 80051aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ae:	81a3      	strh	r3, [r4, #12]
 80051b0:	f04f 30ff 	mov.w	r0, #4294967295
 80051b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b8:	6921      	ldr	r1, [r4, #16]
 80051ba:	464a      	mov	r2, r9
 80051bc:	f7ff ff98 	bl	80050f0 <memcpy>
 80051c0:	89a3      	ldrh	r3, [r4, #12]
 80051c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ca:	81a3      	strh	r3, [r4, #12]
 80051cc:	6126      	str	r6, [r4, #16]
 80051ce:	6165      	str	r5, [r4, #20]
 80051d0:	444e      	add	r6, r9
 80051d2:	eba5 0509 	sub.w	r5, r5, r9
 80051d6:	6026      	str	r6, [r4, #0]
 80051d8:	60a5      	str	r5, [r4, #8]
 80051da:	463e      	mov	r6, r7
 80051dc:	42be      	cmp	r6, r7
 80051de:	d900      	bls.n	80051e2 <__ssputs_r+0x86>
 80051e0:	463e      	mov	r6, r7
 80051e2:	4632      	mov	r2, r6
 80051e4:	6820      	ldr	r0, [r4, #0]
 80051e6:	4641      	mov	r1, r8
 80051e8:	f000 faa8 	bl	800573c <memmove>
 80051ec:	68a3      	ldr	r3, [r4, #8]
 80051ee:	6822      	ldr	r2, [r4, #0]
 80051f0:	1b9b      	subs	r3, r3, r6
 80051f2:	4432      	add	r2, r6
 80051f4:	60a3      	str	r3, [r4, #8]
 80051f6:	6022      	str	r2, [r4, #0]
 80051f8:	2000      	movs	r0, #0
 80051fa:	e7db      	b.n	80051b4 <__ssputs_r+0x58>
 80051fc:	462a      	mov	r2, r5
 80051fe:	f000 fb61 	bl	80058c4 <_realloc_r>
 8005202:	4606      	mov	r6, r0
 8005204:	2800      	cmp	r0, #0
 8005206:	d1e1      	bne.n	80051cc <__ssputs_r+0x70>
 8005208:	6921      	ldr	r1, [r4, #16]
 800520a:	4650      	mov	r0, sl
 800520c:	f000 fab0 	bl	8005770 <_free_r>
 8005210:	e7c7      	b.n	80051a2 <__ssputs_r+0x46>
	...

08005214 <_svfiprintf_r>:
 8005214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005218:	4698      	mov	r8, r3
 800521a:	898b      	ldrh	r3, [r1, #12]
 800521c:	061b      	lsls	r3, r3, #24
 800521e:	b09d      	sub	sp, #116	; 0x74
 8005220:	4607      	mov	r7, r0
 8005222:	460d      	mov	r5, r1
 8005224:	4614      	mov	r4, r2
 8005226:	d50e      	bpl.n	8005246 <_svfiprintf_r+0x32>
 8005228:	690b      	ldr	r3, [r1, #16]
 800522a:	b963      	cbnz	r3, 8005246 <_svfiprintf_r+0x32>
 800522c:	2140      	movs	r1, #64	; 0x40
 800522e:	f000 faef 	bl	8005810 <_malloc_r>
 8005232:	6028      	str	r0, [r5, #0]
 8005234:	6128      	str	r0, [r5, #16]
 8005236:	b920      	cbnz	r0, 8005242 <_svfiprintf_r+0x2e>
 8005238:	230c      	movs	r3, #12
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	f04f 30ff 	mov.w	r0, #4294967295
 8005240:	e0d1      	b.n	80053e6 <_svfiprintf_r+0x1d2>
 8005242:	2340      	movs	r3, #64	; 0x40
 8005244:	616b      	str	r3, [r5, #20]
 8005246:	2300      	movs	r3, #0
 8005248:	9309      	str	r3, [sp, #36]	; 0x24
 800524a:	2320      	movs	r3, #32
 800524c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005250:	f8cd 800c 	str.w	r8, [sp, #12]
 8005254:	2330      	movs	r3, #48	; 0x30
 8005256:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005400 <_svfiprintf_r+0x1ec>
 800525a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800525e:	f04f 0901 	mov.w	r9, #1
 8005262:	4623      	mov	r3, r4
 8005264:	469a      	mov	sl, r3
 8005266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800526a:	b10a      	cbz	r2, 8005270 <_svfiprintf_r+0x5c>
 800526c:	2a25      	cmp	r2, #37	; 0x25
 800526e:	d1f9      	bne.n	8005264 <_svfiprintf_r+0x50>
 8005270:	ebba 0b04 	subs.w	fp, sl, r4
 8005274:	d00b      	beq.n	800528e <_svfiprintf_r+0x7a>
 8005276:	465b      	mov	r3, fp
 8005278:	4622      	mov	r2, r4
 800527a:	4629      	mov	r1, r5
 800527c:	4638      	mov	r0, r7
 800527e:	f7ff ff6d 	bl	800515c <__ssputs_r>
 8005282:	3001      	adds	r0, #1
 8005284:	f000 80aa 	beq.w	80053dc <_svfiprintf_r+0x1c8>
 8005288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800528a:	445a      	add	r2, fp
 800528c:	9209      	str	r2, [sp, #36]	; 0x24
 800528e:	f89a 3000 	ldrb.w	r3, [sl]
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 80a2 	beq.w	80053dc <_svfiprintf_r+0x1c8>
 8005298:	2300      	movs	r3, #0
 800529a:	f04f 32ff 	mov.w	r2, #4294967295
 800529e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052a2:	f10a 0a01 	add.w	sl, sl, #1
 80052a6:	9304      	str	r3, [sp, #16]
 80052a8:	9307      	str	r3, [sp, #28]
 80052aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052ae:	931a      	str	r3, [sp, #104]	; 0x68
 80052b0:	4654      	mov	r4, sl
 80052b2:	2205      	movs	r2, #5
 80052b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052b8:	4851      	ldr	r0, [pc, #324]	; (8005400 <_svfiprintf_r+0x1ec>)
 80052ba:	f7fa ffb1 	bl	8000220 <memchr>
 80052be:	9a04      	ldr	r2, [sp, #16]
 80052c0:	b9d8      	cbnz	r0, 80052fa <_svfiprintf_r+0xe6>
 80052c2:	06d0      	lsls	r0, r2, #27
 80052c4:	bf44      	itt	mi
 80052c6:	2320      	movmi	r3, #32
 80052c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052cc:	0711      	lsls	r1, r2, #28
 80052ce:	bf44      	itt	mi
 80052d0:	232b      	movmi	r3, #43	; 0x2b
 80052d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052d6:	f89a 3000 	ldrb.w	r3, [sl]
 80052da:	2b2a      	cmp	r3, #42	; 0x2a
 80052dc:	d015      	beq.n	800530a <_svfiprintf_r+0xf6>
 80052de:	9a07      	ldr	r2, [sp, #28]
 80052e0:	4654      	mov	r4, sl
 80052e2:	2000      	movs	r0, #0
 80052e4:	f04f 0c0a 	mov.w	ip, #10
 80052e8:	4621      	mov	r1, r4
 80052ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052ee:	3b30      	subs	r3, #48	; 0x30
 80052f0:	2b09      	cmp	r3, #9
 80052f2:	d94e      	bls.n	8005392 <_svfiprintf_r+0x17e>
 80052f4:	b1b0      	cbz	r0, 8005324 <_svfiprintf_r+0x110>
 80052f6:	9207      	str	r2, [sp, #28]
 80052f8:	e014      	b.n	8005324 <_svfiprintf_r+0x110>
 80052fa:	eba0 0308 	sub.w	r3, r0, r8
 80052fe:	fa09 f303 	lsl.w	r3, r9, r3
 8005302:	4313      	orrs	r3, r2
 8005304:	9304      	str	r3, [sp, #16]
 8005306:	46a2      	mov	sl, r4
 8005308:	e7d2      	b.n	80052b0 <_svfiprintf_r+0x9c>
 800530a:	9b03      	ldr	r3, [sp, #12]
 800530c:	1d19      	adds	r1, r3, #4
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	9103      	str	r1, [sp, #12]
 8005312:	2b00      	cmp	r3, #0
 8005314:	bfbb      	ittet	lt
 8005316:	425b      	neglt	r3, r3
 8005318:	f042 0202 	orrlt.w	r2, r2, #2
 800531c:	9307      	strge	r3, [sp, #28]
 800531e:	9307      	strlt	r3, [sp, #28]
 8005320:	bfb8      	it	lt
 8005322:	9204      	strlt	r2, [sp, #16]
 8005324:	7823      	ldrb	r3, [r4, #0]
 8005326:	2b2e      	cmp	r3, #46	; 0x2e
 8005328:	d10c      	bne.n	8005344 <_svfiprintf_r+0x130>
 800532a:	7863      	ldrb	r3, [r4, #1]
 800532c:	2b2a      	cmp	r3, #42	; 0x2a
 800532e:	d135      	bne.n	800539c <_svfiprintf_r+0x188>
 8005330:	9b03      	ldr	r3, [sp, #12]
 8005332:	1d1a      	adds	r2, r3, #4
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	9203      	str	r2, [sp, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	bfb8      	it	lt
 800533c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005340:	3402      	adds	r4, #2
 8005342:	9305      	str	r3, [sp, #20]
 8005344:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005410 <_svfiprintf_r+0x1fc>
 8005348:	7821      	ldrb	r1, [r4, #0]
 800534a:	2203      	movs	r2, #3
 800534c:	4650      	mov	r0, sl
 800534e:	f7fa ff67 	bl	8000220 <memchr>
 8005352:	b140      	cbz	r0, 8005366 <_svfiprintf_r+0x152>
 8005354:	2340      	movs	r3, #64	; 0x40
 8005356:	eba0 000a 	sub.w	r0, r0, sl
 800535a:	fa03 f000 	lsl.w	r0, r3, r0
 800535e:	9b04      	ldr	r3, [sp, #16]
 8005360:	4303      	orrs	r3, r0
 8005362:	3401      	adds	r4, #1
 8005364:	9304      	str	r3, [sp, #16]
 8005366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800536a:	4826      	ldr	r0, [pc, #152]	; (8005404 <_svfiprintf_r+0x1f0>)
 800536c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005370:	2206      	movs	r2, #6
 8005372:	f7fa ff55 	bl	8000220 <memchr>
 8005376:	2800      	cmp	r0, #0
 8005378:	d038      	beq.n	80053ec <_svfiprintf_r+0x1d8>
 800537a:	4b23      	ldr	r3, [pc, #140]	; (8005408 <_svfiprintf_r+0x1f4>)
 800537c:	bb1b      	cbnz	r3, 80053c6 <_svfiprintf_r+0x1b2>
 800537e:	9b03      	ldr	r3, [sp, #12]
 8005380:	3307      	adds	r3, #7
 8005382:	f023 0307 	bic.w	r3, r3, #7
 8005386:	3308      	adds	r3, #8
 8005388:	9303      	str	r3, [sp, #12]
 800538a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800538c:	4433      	add	r3, r6
 800538e:	9309      	str	r3, [sp, #36]	; 0x24
 8005390:	e767      	b.n	8005262 <_svfiprintf_r+0x4e>
 8005392:	fb0c 3202 	mla	r2, ip, r2, r3
 8005396:	460c      	mov	r4, r1
 8005398:	2001      	movs	r0, #1
 800539a:	e7a5      	b.n	80052e8 <_svfiprintf_r+0xd4>
 800539c:	2300      	movs	r3, #0
 800539e:	3401      	adds	r4, #1
 80053a0:	9305      	str	r3, [sp, #20]
 80053a2:	4619      	mov	r1, r3
 80053a4:	f04f 0c0a 	mov.w	ip, #10
 80053a8:	4620      	mov	r0, r4
 80053aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053ae:	3a30      	subs	r2, #48	; 0x30
 80053b0:	2a09      	cmp	r2, #9
 80053b2:	d903      	bls.n	80053bc <_svfiprintf_r+0x1a8>
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0c5      	beq.n	8005344 <_svfiprintf_r+0x130>
 80053b8:	9105      	str	r1, [sp, #20]
 80053ba:	e7c3      	b.n	8005344 <_svfiprintf_r+0x130>
 80053bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80053c0:	4604      	mov	r4, r0
 80053c2:	2301      	movs	r3, #1
 80053c4:	e7f0      	b.n	80053a8 <_svfiprintf_r+0x194>
 80053c6:	ab03      	add	r3, sp, #12
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	462a      	mov	r2, r5
 80053cc:	4b0f      	ldr	r3, [pc, #60]	; (800540c <_svfiprintf_r+0x1f8>)
 80053ce:	a904      	add	r1, sp, #16
 80053d0:	4638      	mov	r0, r7
 80053d2:	f3af 8000 	nop.w
 80053d6:	1c42      	adds	r2, r0, #1
 80053d8:	4606      	mov	r6, r0
 80053da:	d1d6      	bne.n	800538a <_svfiprintf_r+0x176>
 80053dc:	89ab      	ldrh	r3, [r5, #12]
 80053de:	065b      	lsls	r3, r3, #25
 80053e0:	f53f af2c 	bmi.w	800523c <_svfiprintf_r+0x28>
 80053e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053e6:	b01d      	add	sp, #116	; 0x74
 80053e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ec:	ab03      	add	r3, sp, #12
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	462a      	mov	r2, r5
 80053f2:	4b06      	ldr	r3, [pc, #24]	; (800540c <_svfiprintf_r+0x1f8>)
 80053f4:	a904      	add	r1, sp, #16
 80053f6:	4638      	mov	r0, r7
 80053f8:	f000 f87a 	bl	80054f0 <_printf_i>
 80053fc:	e7eb      	b.n	80053d6 <_svfiprintf_r+0x1c2>
 80053fe:	bf00      	nop
 8005400:	08005ba0 	.word	0x08005ba0
 8005404:	08005baa 	.word	0x08005baa
 8005408:	00000000 	.word	0x00000000
 800540c:	0800515d 	.word	0x0800515d
 8005410:	08005ba6 	.word	0x08005ba6

08005414 <_printf_common>:
 8005414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005418:	4616      	mov	r6, r2
 800541a:	4699      	mov	r9, r3
 800541c:	688a      	ldr	r2, [r1, #8]
 800541e:	690b      	ldr	r3, [r1, #16]
 8005420:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005424:	4293      	cmp	r3, r2
 8005426:	bfb8      	it	lt
 8005428:	4613      	movlt	r3, r2
 800542a:	6033      	str	r3, [r6, #0]
 800542c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005430:	4607      	mov	r7, r0
 8005432:	460c      	mov	r4, r1
 8005434:	b10a      	cbz	r2, 800543a <_printf_common+0x26>
 8005436:	3301      	adds	r3, #1
 8005438:	6033      	str	r3, [r6, #0]
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	0699      	lsls	r1, r3, #26
 800543e:	bf42      	ittt	mi
 8005440:	6833      	ldrmi	r3, [r6, #0]
 8005442:	3302      	addmi	r3, #2
 8005444:	6033      	strmi	r3, [r6, #0]
 8005446:	6825      	ldr	r5, [r4, #0]
 8005448:	f015 0506 	ands.w	r5, r5, #6
 800544c:	d106      	bne.n	800545c <_printf_common+0x48>
 800544e:	f104 0a19 	add.w	sl, r4, #25
 8005452:	68e3      	ldr	r3, [r4, #12]
 8005454:	6832      	ldr	r2, [r6, #0]
 8005456:	1a9b      	subs	r3, r3, r2
 8005458:	42ab      	cmp	r3, r5
 800545a:	dc26      	bgt.n	80054aa <_printf_common+0x96>
 800545c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005460:	1e13      	subs	r3, r2, #0
 8005462:	6822      	ldr	r2, [r4, #0]
 8005464:	bf18      	it	ne
 8005466:	2301      	movne	r3, #1
 8005468:	0692      	lsls	r2, r2, #26
 800546a:	d42b      	bmi.n	80054c4 <_printf_common+0xb0>
 800546c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005470:	4649      	mov	r1, r9
 8005472:	4638      	mov	r0, r7
 8005474:	47c0      	blx	r8
 8005476:	3001      	adds	r0, #1
 8005478:	d01e      	beq.n	80054b8 <_printf_common+0xa4>
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	68e5      	ldr	r5, [r4, #12]
 800547e:	6832      	ldr	r2, [r6, #0]
 8005480:	f003 0306 	and.w	r3, r3, #6
 8005484:	2b04      	cmp	r3, #4
 8005486:	bf08      	it	eq
 8005488:	1aad      	subeq	r5, r5, r2
 800548a:	68a3      	ldr	r3, [r4, #8]
 800548c:	6922      	ldr	r2, [r4, #16]
 800548e:	bf0c      	ite	eq
 8005490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005494:	2500      	movne	r5, #0
 8005496:	4293      	cmp	r3, r2
 8005498:	bfc4      	itt	gt
 800549a:	1a9b      	subgt	r3, r3, r2
 800549c:	18ed      	addgt	r5, r5, r3
 800549e:	2600      	movs	r6, #0
 80054a0:	341a      	adds	r4, #26
 80054a2:	42b5      	cmp	r5, r6
 80054a4:	d11a      	bne.n	80054dc <_printf_common+0xc8>
 80054a6:	2000      	movs	r0, #0
 80054a8:	e008      	b.n	80054bc <_printf_common+0xa8>
 80054aa:	2301      	movs	r3, #1
 80054ac:	4652      	mov	r2, sl
 80054ae:	4649      	mov	r1, r9
 80054b0:	4638      	mov	r0, r7
 80054b2:	47c0      	blx	r8
 80054b4:	3001      	adds	r0, #1
 80054b6:	d103      	bne.n	80054c0 <_printf_common+0xac>
 80054b8:	f04f 30ff 	mov.w	r0, #4294967295
 80054bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054c0:	3501      	adds	r5, #1
 80054c2:	e7c6      	b.n	8005452 <_printf_common+0x3e>
 80054c4:	18e1      	adds	r1, r4, r3
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	2030      	movs	r0, #48	; 0x30
 80054ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054ce:	4422      	add	r2, r4
 80054d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054d8:	3302      	adds	r3, #2
 80054da:	e7c7      	b.n	800546c <_printf_common+0x58>
 80054dc:	2301      	movs	r3, #1
 80054de:	4622      	mov	r2, r4
 80054e0:	4649      	mov	r1, r9
 80054e2:	4638      	mov	r0, r7
 80054e4:	47c0      	blx	r8
 80054e6:	3001      	adds	r0, #1
 80054e8:	d0e6      	beq.n	80054b8 <_printf_common+0xa4>
 80054ea:	3601      	adds	r6, #1
 80054ec:	e7d9      	b.n	80054a2 <_printf_common+0x8e>
	...

080054f0 <_printf_i>:
 80054f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054f4:	460c      	mov	r4, r1
 80054f6:	4691      	mov	r9, r2
 80054f8:	7e27      	ldrb	r7, [r4, #24]
 80054fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80054fc:	2f78      	cmp	r7, #120	; 0x78
 80054fe:	4680      	mov	r8, r0
 8005500:	469a      	mov	sl, r3
 8005502:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005506:	d807      	bhi.n	8005518 <_printf_i+0x28>
 8005508:	2f62      	cmp	r7, #98	; 0x62
 800550a:	d80a      	bhi.n	8005522 <_printf_i+0x32>
 800550c:	2f00      	cmp	r7, #0
 800550e:	f000 80d8 	beq.w	80056c2 <_printf_i+0x1d2>
 8005512:	2f58      	cmp	r7, #88	; 0x58
 8005514:	f000 80a3 	beq.w	800565e <_printf_i+0x16e>
 8005518:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800551c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005520:	e03a      	b.n	8005598 <_printf_i+0xa8>
 8005522:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005526:	2b15      	cmp	r3, #21
 8005528:	d8f6      	bhi.n	8005518 <_printf_i+0x28>
 800552a:	a001      	add	r0, pc, #4	; (adr r0, 8005530 <_printf_i+0x40>)
 800552c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005530:	08005589 	.word	0x08005589
 8005534:	0800559d 	.word	0x0800559d
 8005538:	08005519 	.word	0x08005519
 800553c:	08005519 	.word	0x08005519
 8005540:	08005519 	.word	0x08005519
 8005544:	08005519 	.word	0x08005519
 8005548:	0800559d 	.word	0x0800559d
 800554c:	08005519 	.word	0x08005519
 8005550:	08005519 	.word	0x08005519
 8005554:	08005519 	.word	0x08005519
 8005558:	08005519 	.word	0x08005519
 800555c:	080056a9 	.word	0x080056a9
 8005560:	080055cd 	.word	0x080055cd
 8005564:	0800568b 	.word	0x0800568b
 8005568:	08005519 	.word	0x08005519
 800556c:	08005519 	.word	0x08005519
 8005570:	080056cb 	.word	0x080056cb
 8005574:	08005519 	.word	0x08005519
 8005578:	080055cd 	.word	0x080055cd
 800557c:	08005519 	.word	0x08005519
 8005580:	08005519 	.word	0x08005519
 8005584:	08005693 	.word	0x08005693
 8005588:	680b      	ldr	r3, [r1, #0]
 800558a:	1d1a      	adds	r2, r3, #4
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	600a      	str	r2, [r1, #0]
 8005590:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005594:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005598:	2301      	movs	r3, #1
 800559a:	e0a3      	b.n	80056e4 <_printf_i+0x1f4>
 800559c:	6825      	ldr	r5, [r4, #0]
 800559e:	6808      	ldr	r0, [r1, #0]
 80055a0:	062e      	lsls	r6, r5, #24
 80055a2:	f100 0304 	add.w	r3, r0, #4
 80055a6:	d50a      	bpl.n	80055be <_printf_i+0xce>
 80055a8:	6805      	ldr	r5, [r0, #0]
 80055aa:	600b      	str	r3, [r1, #0]
 80055ac:	2d00      	cmp	r5, #0
 80055ae:	da03      	bge.n	80055b8 <_printf_i+0xc8>
 80055b0:	232d      	movs	r3, #45	; 0x2d
 80055b2:	426d      	negs	r5, r5
 80055b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055b8:	485e      	ldr	r0, [pc, #376]	; (8005734 <_printf_i+0x244>)
 80055ba:	230a      	movs	r3, #10
 80055bc:	e019      	b.n	80055f2 <_printf_i+0x102>
 80055be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80055c2:	6805      	ldr	r5, [r0, #0]
 80055c4:	600b      	str	r3, [r1, #0]
 80055c6:	bf18      	it	ne
 80055c8:	b22d      	sxthne	r5, r5
 80055ca:	e7ef      	b.n	80055ac <_printf_i+0xbc>
 80055cc:	680b      	ldr	r3, [r1, #0]
 80055ce:	6825      	ldr	r5, [r4, #0]
 80055d0:	1d18      	adds	r0, r3, #4
 80055d2:	6008      	str	r0, [r1, #0]
 80055d4:	0628      	lsls	r0, r5, #24
 80055d6:	d501      	bpl.n	80055dc <_printf_i+0xec>
 80055d8:	681d      	ldr	r5, [r3, #0]
 80055da:	e002      	b.n	80055e2 <_printf_i+0xf2>
 80055dc:	0669      	lsls	r1, r5, #25
 80055de:	d5fb      	bpl.n	80055d8 <_printf_i+0xe8>
 80055e0:	881d      	ldrh	r5, [r3, #0]
 80055e2:	4854      	ldr	r0, [pc, #336]	; (8005734 <_printf_i+0x244>)
 80055e4:	2f6f      	cmp	r7, #111	; 0x6f
 80055e6:	bf0c      	ite	eq
 80055e8:	2308      	moveq	r3, #8
 80055ea:	230a      	movne	r3, #10
 80055ec:	2100      	movs	r1, #0
 80055ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055f2:	6866      	ldr	r6, [r4, #4]
 80055f4:	60a6      	str	r6, [r4, #8]
 80055f6:	2e00      	cmp	r6, #0
 80055f8:	bfa2      	ittt	ge
 80055fa:	6821      	ldrge	r1, [r4, #0]
 80055fc:	f021 0104 	bicge.w	r1, r1, #4
 8005600:	6021      	strge	r1, [r4, #0]
 8005602:	b90d      	cbnz	r5, 8005608 <_printf_i+0x118>
 8005604:	2e00      	cmp	r6, #0
 8005606:	d04d      	beq.n	80056a4 <_printf_i+0x1b4>
 8005608:	4616      	mov	r6, r2
 800560a:	fbb5 f1f3 	udiv	r1, r5, r3
 800560e:	fb03 5711 	mls	r7, r3, r1, r5
 8005612:	5dc7      	ldrb	r7, [r0, r7]
 8005614:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005618:	462f      	mov	r7, r5
 800561a:	42bb      	cmp	r3, r7
 800561c:	460d      	mov	r5, r1
 800561e:	d9f4      	bls.n	800560a <_printf_i+0x11a>
 8005620:	2b08      	cmp	r3, #8
 8005622:	d10b      	bne.n	800563c <_printf_i+0x14c>
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	07df      	lsls	r7, r3, #31
 8005628:	d508      	bpl.n	800563c <_printf_i+0x14c>
 800562a:	6923      	ldr	r3, [r4, #16]
 800562c:	6861      	ldr	r1, [r4, #4]
 800562e:	4299      	cmp	r1, r3
 8005630:	bfde      	ittt	le
 8005632:	2330      	movle	r3, #48	; 0x30
 8005634:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005638:	f106 36ff 	addle.w	r6, r6, #4294967295
 800563c:	1b92      	subs	r2, r2, r6
 800563e:	6122      	str	r2, [r4, #16]
 8005640:	f8cd a000 	str.w	sl, [sp]
 8005644:	464b      	mov	r3, r9
 8005646:	aa03      	add	r2, sp, #12
 8005648:	4621      	mov	r1, r4
 800564a:	4640      	mov	r0, r8
 800564c:	f7ff fee2 	bl	8005414 <_printf_common>
 8005650:	3001      	adds	r0, #1
 8005652:	d14c      	bne.n	80056ee <_printf_i+0x1fe>
 8005654:	f04f 30ff 	mov.w	r0, #4294967295
 8005658:	b004      	add	sp, #16
 800565a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800565e:	4835      	ldr	r0, [pc, #212]	; (8005734 <_printf_i+0x244>)
 8005660:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005664:	6823      	ldr	r3, [r4, #0]
 8005666:	680e      	ldr	r6, [r1, #0]
 8005668:	061f      	lsls	r7, r3, #24
 800566a:	f856 5b04 	ldr.w	r5, [r6], #4
 800566e:	600e      	str	r6, [r1, #0]
 8005670:	d514      	bpl.n	800569c <_printf_i+0x1ac>
 8005672:	07d9      	lsls	r1, r3, #31
 8005674:	bf44      	itt	mi
 8005676:	f043 0320 	orrmi.w	r3, r3, #32
 800567a:	6023      	strmi	r3, [r4, #0]
 800567c:	b91d      	cbnz	r5, 8005686 <_printf_i+0x196>
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	f023 0320 	bic.w	r3, r3, #32
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	2310      	movs	r3, #16
 8005688:	e7b0      	b.n	80055ec <_printf_i+0xfc>
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	f043 0320 	orr.w	r3, r3, #32
 8005690:	6023      	str	r3, [r4, #0]
 8005692:	2378      	movs	r3, #120	; 0x78
 8005694:	4828      	ldr	r0, [pc, #160]	; (8005738 <_printf_i+0x248>)
 8005696:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800569a:	e7e3      	b.n	8005664 <_printf_i+0x174>
 800569c:	065e      	lsls	r6, r3, #25
 800569e:	bf48      	it	mi
 80056a0:	b2ad      	uxthmi	r5, r5
 80056a2:	e7e6      	b.n	8005672 <_printf_i+0x182>
 80056a4:	4616      	mov	r6, r2
 80056a6:	e7bb      	b.n	8005620 <_printf_i+0x130>
 80056a8:	680b      	ldr	r3, [r1, #0]
 80056aa:	6826      	ldr	r6, [r4, #0]
 80056ac:	6960      	ldr	r0, [r4, #20]
 80056ae:	1d1d      	adds	r5, r3, #4
 80056b0:	600d      	str	r5, [r1, #0]
 80056b2:	0635      	lsls	r5, r6, #24
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	d501      	bpl.n	80056bc <_printf_i+0x1cc>
 80056b8:	6018      	str	r0, [r3, #0]
 80056ba:	e002      	b.n	80056c2 <_printf_i+0x1d2>
 80056bc:	0671      	lsls	r1, r6, #25
 80056be:	d5fb      	bpl.n	80056b8 <_printf_i+0x1c8>
 80056c0:	8018      	strh	r0, [r3, #0]
 80056c2:	2300      	movs	r3, #0
 80056c4:	6123      	str	r3, [r4, #16]
 80056c6:	4616      	mov	r6, r2
 80056c8:	e7ba      	b.n	8005640 <_printf_i+0x150>
 80056ca:	680b      	ldr	r3, [r1, #0]
 80056cc:	1d1a      	adds	r2, r3, #4
 80056ce:	600a      	str	r2, [r1, #0]
 80056d0:	681e      	ldr	r6, [r3, #0]
 80056d2:	6862      	ldr	r2, [r4, #4]
 80056d4:	2100      	movs	r1, #0
 80056d6:	4630      	mov	r0, r6
 80056d8:	f7fa fda2 	bl	8000220 <memchr>
 80056dc:	b108      	cbz	r0, 80056e2 <_printf_i+0x1f2>
 80056de:	1b80      	subs	r0, r0, r6
 80056e0:	6060      	str	r0, [r4, #4]
 80056e2:	6863      	ldr	r3, [r4, #4]
 80056e4:	6123      	str	r3, [r4, #16]
 80056e6:	2300      	movs	r3, #0
 80056e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056ec:	e7a8      	b.n	8005640 <_printf_i+0x150>
 80056ee:	6923      	ldr	r3, [r4, #16]
 80056f0:	4632      	mov	r2, r6
 80056f2:	4649      	mov	r1, r9
 80056f4:	4640      	mov	r0, r8
 80056f6:	47d0      	blx	sl
 80056f8:	3001      	adds	r0, #1
 80056fa:	d0ab      	beq.n	8005654 <_printf_i+0x164>
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	079b      	lsls	r3, r3, #30
 8005700:	d413      	bmi.n	800572a <_printf_i+0x23a>
 8005702:	68e0      	ldr	r0, [r4, #12]
 8005704:	9b03      	ldr	r3, [sp, #12]
 8005706:	4298      	cmp	r0, r3
 8005708:	bfb8      	it	lt
 800570a:	4618      	movlt	r0, r3
 800570c:	e7a4      	b.n	8005658 <_printf_i+0x168>
 800570e:	2301      	movs	r3, #1
 8005710:	4632      	mov	r2, r6
 8005712:	4649      	mov	r1, r9
 8005714:	4640      	mov	r0, r8
 8005716:	47d0      	blx	sl
 8005718:	3001      	adds	r0, #1
 800571a:	d09b      	beq.n	8005654 <_printf_i+0x164>
 800571c:	3501      	adds	r5, #1
 800571e:	68e3      	ldr	r3, [r4, #12]
 8005720:	9903      	ldr	r1, [sp, #12]
 8005722:	1a5b      	subs	r3, r3, r1
 8005724:	42ab      	cmp	r3, r5
 8005726:	dcf2      	bgt.n	800570e <_printf_i+0x21e>
 8005728:	e7eb      	b.n	8005702 <_printf_i+0x212>
 800572a:	2500      	movs	r5, #0
 800572c:	f104 0619 	add.w	r6, r4, #25
 8005730:	e7f5      	b.n	800571e <_printf_i+0x22e>
 8005732:	bf00      	nop
 8005734:	08005bb1 	.word	0x08005bb1
 8005738:	08005bc2 	.word	0x08005bc2

0800573c <memmove>:
 800573c:	4288      	cmp	r0, r1
 800573e:	b510      	push	{r4, lr}
 8005740:	eb01 0402 	add.w	r4, r1, r2
 8005744:	d902      	bls.n	800574c <memmove+0x10>
 8005746:	4284      	cmp	r4, r0
 8005748:	4623      	mov	r3, r4
 800574a:	d807      	bhi.n	800575c <memmove+0x20>
 800574c:	1e43      	subs	r3, r0, #1
 800574e:	42a1      	cmp	r1, r4
 8005750:	d008      	beq.n	8005764 <memmove+0x28>
 8005752:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005756:	f803 2f01 	strb.w	r2, [r3, #1]!
 800575a:	e7f8      	b.n	800574e <memmove+0x12>
 800575c:	4402      	add	r2, r0
 800575e:	4601      	mov	r1, r0
 8005760:	428a      	cmp	r2, r1
 8005762:	d100      	bne.n	8005766 <memmove+0x2a>
 8005764:	bd10      	pop	{r4, pc}
 8005766:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800576a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800576e:	e7f7      	b.n	8005760 <memmove+0x24>

08005770 <_free_r>:
 8005770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005772:	2900      	cmp	r1, #0
 8005774:	d048      	beq.n	8005808 <_free_r+0x98>
 8005776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800577a:	9001      	str	r0, [sp, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	f1a1 0404 	sub.w	r4, r1, #4
 8005782:	bfb8      	it	lt
 8005784:	18e4      	addlt	r4, r4, r3
 8005786:	f000 f8d3 	bl	8005930 <__malloc_lock>
 800578a:	4a20      	ldr	r2, [pc, #128]	; (800580c <_free_r+0x9c>)
 800578c:	9801      	ldr	r0, [sp, #4]
 800578e:	6813      	ldr	r3, [r2, #0]
 8005790:	4615      	mov	r5, r2
 8005792:	b933      	cbnz	r3, 80057a2 <_free_r+0x32>
 8005794:	6063      	str	r3, [r4, #4]
 8005796:	6014      	str	r4, [r2, #0]
 8005798:	b003      	add	sp, #12
 800579a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800579e:	f000 b8cd 	b.w	800593c <__malloc_unlock>
 80057a2:	42a3      	cmp	r3, r4
 80057a4:	d90b      	bls.n	80057be <_free_r+0x4e>
 80057a6:	6821      	ldr	r1, [r4, #0]
 80057a8:	1862      	adds	r2, r4, r1
 80057aa:	4293      	cmp	r3, r2
 80057ac:	bf04      	itt	eq
 80057ae:	681a      	ldreq	r2, [r3, #0]
 80057b0:	685b      	ldreq	r3, [r3, #4]
 80057b2:	6063      	str	r3, [r4, #4]
 80057b4:	bf04      	itt	eq
 80057b6:	1852      	addeq	r2, r2, r1
 80057b8:	6022      	streq	r2, [r4, #0]
 80057ba:	602c      	str	r4, [r5, #0]
 80057bc:	e7ec      	b.n	8005798 <_free_r+0x28>
 80057be:	461a      	mov	r2, r3
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	b10b      	cbz	r3, 80057c8 <_free_r+0x58>
 80057c4:	42a3      	cmp	r3, r4
 80057c6:	d9fa      	bls.n	80057be <_free_r+0x4e>
 80057c8:	6811      	ldr	r1, [r2, #0]
 80057ca:	1855      	adds	r5, r2, r1
 80057cc:	42a5      	cmp	r5, r4
 80057ce:	d10b      	bne.n	80057e8 <_free_r+0x78>
 80057d0:	6824      	ldr	r4, [r4, #0]
 80057d2:	4421      	add	r1, r4
 80057d4:	1854      	adds	r4, r2, r1
 80057d6:	42a3      	cmp	r3, r4
 80057d8:	6011      	str	r1, [r2, #0]
 80057da:	d1dd      	bne.n	8005798 <_free_r+0x28>
 80057dc:	681c      	ldr	r4, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	6053      	str	r3, [r2, #4]
 80057e2:	4421      	add	r1, r4
 80057e4:	6011      	str	r1, [r2, #0]
 80057e6:	e7d7      	b.n	8005798 <_free_r+0x28>
 80057e8:	d902      	bls.n	80057f0 <_free_r+0x80>
 80057ea:	230c      	movs	r3, #12
 80057ec:	6003      	str	r3, [r0, #0]
 80057ee:	e7d3      	b.n	8005798 <_free_r+0x28>
 80057f0:	6825      	ldr	r5, [r4, #0]
 80057f2:	1961      	adds	r1, r4, r5
 80057f4:	428b      	cmp	r3, r1
 80057f6:	bf04      	itt	eq
 80057f8:	6819      	ldreq	r1, [r3, #0]
 80057fa:	685b      	ldreq	r3, [r3, #4]
 80057fc:	6063      	str	r3, [r4, #4]
 80057fe:	bf04      	itt	eq
 8005800:	1949      	addeq	r1, r1, r5
 8005802:	6021      	streq	r1, [r4, #0]
 8005804:	6054      	str	r4, [r2, #4]
 8005806:	e7c7      	b.n	8005798 <_free_r+0x28>
 8005808:	b003      	add	sp, #12
 800580a:	bd30      	pop	{r4, r5, pc}
 800580c:	2000009c 	.word	0x2000009c

08005810 <_malloc_r>:
 8005810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005812:	1ccd      	adds	r5, r1, #3
 8005814:	f025 0503 	bic.w	r5, r5, #3
 8005818:	3508      	adds	r5, #8
 800581a:	2d0c      	cmp	r5, #12
 800581c:	bf38      	it	cc
 800581e:	250c      	movcc	r5, #12
 8005820:	2d00      	cmp	r5, #0
 8005822:	4606      	mov	r6, r0
 8005824:	db01      	blt.n	800582a <_malloc_r+0x1a>
 8005826:	42a9      	cmp	r1, r5
 8005828:	d903      	bls.n	8005832 <_malloc_r+0x22>
 800582a:	230c      	movs	r3, #12
 800582c:	6033      	str	r3, [r6, #0]
 800582e:	2000      	movs	r0, #0
 8005830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005832:	f000 f87d 	bl	8005930 <__malloc_lock>
 8005836:	4921      	ldr	r1, [pc, #132]	; (80058bc <_malloc_r+0xac>)
 8005838:	680a      	ldr	r2, [r1, #0]
 800583a:	4614      	mov	r4, r2
 800583c:	b99c      	cbnz	r4, 8005866 <_malloc_r+0x56>
 800583e:	4f20      	ldr	r7, [pc, #128]	; (80058c0 <_malloc_r+0xb0>)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	b923      	cbnz	r3, 800584e <_malloc_r+0x3e>
 8005844:	4621      	mov	r1, r4
 8005846:	4630      	mov	r0, r6
 8005848:	f000 f862 	bl	8005910 <_sbrk_r>
 800584c:	6038      	str	r0, [r7, #0]
 800584e:	4629      	mov	r1, r5
 8005850:	4630      	mov	r0, r6
 8005852:	f000 f85d 	bl	8005910 <_sbrk_r>
 8005856:	1c43      	adds	r3, r0, #1
 8005858:	d123      	bne.n	80058a2 <_malloc_r+0x92>
 800585a:	230c      	movs	r3, #12
 800585c:	6033      	str	r3, [r6, #0]
 800585e:	4630      	mov	r0, r6
 8005860:	f000 f86c 	bl	800593c <__malloc_unlock>
 8005864:	e7e3      	b.n	800582e <_malloc_r+0x1e>
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	1b5b      	subs	r3, r3, r5
 800586a:	d417      	bmi.n	800589c <_malloc_r+0x8c>
 800586c:	2b0b      	cmp	r3, #11
 800586e:	d903      	bls.n	8005878 <_malloc_r+0x68>
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	441c      	add	r4, r3
 8005874:	6025      	str	r5, [r4, #0]
 8005876:	e004      	b.n	8005882 <_malloc_r+0x72>
 8005878:	6863      	ldr	r3, [r4, #4]
 800587a:	42a2      	cmp	r2, r4
 800587c:	bf0c      	ite	eq
 800587e:	600b      	streq	r3, [r1, #0]
 8005880:	6053      	strne	r3, [r2, #4]
 8005882:	4630      	mov	r0, r6
 8005884:	f000 f85a 	bl	800593c <__malloc_unlock>
 8005888:	f104 000b 	add.w	r0, r4, #11
 800588c:	1d23      	adds	r3, r4, #4
 800588e:	f020 0007 	bic.w	r0, r0, #7
 8005892:	1ac2      	subs	r2, r0, r3
 8005894:	d0cc      	beq.n	8005830 <_malloc_r+0x20>
 8005896:	1a1b      	subs	r3, r3, r0
 8005898:	50a3      	str	r3, [r4, r2]
 800589a:	e7c9      	b.n	8005830 <_malloc_r+0x20>
 800589c:	4622      	mov	r2, r4
 800589e:	6864      	ldr	r4, [r4, #4]
 80058a0:	e7cc      	b.n	800583c <_malloc_r+0x2c>
 80058a2:	1cc4      	adds	r4, r0, #3
 80058a4:	f024 0403 	bic.w	r4, r4, #3
 80058a8:	42a0      	cmp	r0, r4
 80058aa:	d0e3      	beq.n	8005874 <_malloc_r+0x64>
 80058ac:	1a21      	subs	r1, r4, r0
 80058ae:	4630      	mov	r0, r6
 80058b0:	f000 f82e 	bl	8005910 <_sbrk_r>
 80058b4:	3001      	adds	r0, #1
 80058b6:	d1dd      	bne.n	8005874 <_malloc_r+0x64>
 80058b8:	e7cf      	b.n	800585a <_malloc_r+0x4a>
 80058ba:	bf00      	nop
 80058bc:	2000009c 	.word	0x2000009c
 80058c0:	200000a0 	.word	0x200000a0

080058c4 <_realloc_r>:
 80058c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c6:	4607      	mov	r7, r0
 80058c8:	4614      	mov	r4, r2
 80058ca:	460e      	mov	r6, r1
 80058cc:	b921      	cbnz	r1, 80058d8 <_realloc_r+0x14>
 80058ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80058d2:	4611      	mov	r1, r2
 80058d4:	f7ff bf9c 	b.w	8005810 <_malloc_r>
 80058d8:	b922      	cbnz	r2, 80058e4 <_realloc_r+0x20>
 80058da:	f7ff ff49 	bl	8005770 <_free_r>
 80058de:	4625      	mov	r5, r4
 80058e0:	4628      	mov	r0, r5
 80058e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058e4:	f000 f830 	bl	8005948 <_malloc_usable_size_r>
 80058e8:	42a0      	cmp	r0, r4
 80058ea:	d20f      	bcs.n	800590c <_realloc_r+0x48>
 80058ec:	4621      	mov	r1, r4
 80058ee:	4638      	mov	r0, r7
 80058f0:	f7ff ff8e 	bl	8005810 <_malloc_r>
 80058f4:	4605      	mov	r5, r0
 80058f6:	2800      	cmp	r0, #0
 80058f8:	d0f2      	beq.n	80058e0 <_realloc_r+0x1c>
 80058fa:	4631      	mov	r1, r6
 80058fc:	4622      	mov	r2, r4
 80058fe:	f7ff fbf7 	bl	80050f0 <memcpy>
 8005902:	4631      	mov	r1, r6
 8005904:	4638      	mov	r0, r7
 8005906:	f7ff ff33 	bl	8005770 <_free_r>
 800590a:	e7e9      	b.n	80058e0 <_realloc_r+0x1c>
 800590c:	4635      	mov	r5, r6
 800590e:	e7e7      	b.n	80058e0 <_realloc_r+0x1c>

08005910 <_sbrk_r>:
 8005910:	b538      	push	{r3, r4, r5, lr}
 8005912:	4d06      	ldr	r5, [pc, #24]	; (800592c <_sbrk_r+0x1c>)
 8005914:	2300      	movs	r3, #0
 8005916:	4604      	mov	r4, r0
 8005918:	4608      	mov	r0, r1
 800591a:	602b      	str	r3, [r5, #0]
 800591c:	f7fb fef4 	bl	8001708 <_sbrk>
 8005920:	1c43      	adds	r3, r0, #1
 8005922:	d102      	bne.n	800592a <_sbrk_r+0x1a>
 8005924:	682b      	ldr	r3, [r5, #0]
 8005926:	b103      	cbz	r3, 800592a <_sbrk_r+0x1a>
 8005928:	6023      	str	r3, [r4, #0]
 800592a:	bd38      	pop	{r3, r4, r5, pc}
 800592c:	20000258 	.word	0x20000258

08005930 <__malloc_lock>:
 8005930:	4801      	ldr	r0, [pc, #4]	; (8005938 <__malloc_lock+0x8>)
 8005932:	f000 b811 	b.w	8005958 <__retarget_lock_acquire_recursive>
 8005936:	bf00      	nop
 8005938:	20000260 	.word	0x20000260

0800593c <__malloc_unlock>:
 800593c:	4801      	ldr	r0, [pc, #4]	; (8005944 <__malloc_unlock+0x8>)
 800593e:	f000 b80c 	b.w	800595a <__retarget_lock_release_recursive>
 8005942:	bf00      	nop
 8005944:	20000260 	.word	0x20000260

08005948 <_malloc_usable_size_r>:
 8005948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800594c:	1f18      	subs	r0, r3, #4
 800594e:	2b00      	cmp	r3, #0
 8005950:	bfbc      	itt	lt
 8005952:	580b      	ldrlt	r3, [r1, r0]
 8005954:	18c0      	addlt	r0, r0, r3
 8005956:	4770      	bx	lr

08005958 <__retarget_lock_acquire_recursive>:
 8005958:	4770      	bx	lr

0800595a <__retarget_lock_release_recursive>:
 800595a:	4770      	bx	lr

0800595c <_init>:
 800595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595e:	bf00      	nop
 8005960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005962:	bc08      	pop	{r3}
 8005964:	469e      	mov	lr, r3
 8005966:	4770      	bx	lr

08005968 <_fini>:
 8005968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596a:	bf00      	nop
 800596c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596e:	bc08      	pop	{r3}
 8005970:	469e      	mov	lr, r3
 8005972:	4770      	bx	lr
